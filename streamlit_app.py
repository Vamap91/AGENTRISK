# Timeline de remedia√ß√£o DETALHADA
        remediation_timeline = compliance.get('remediation_timeline', {})
        if remediation_timeline:
            st.subheader("‚è∞ Timeline Detalhada de Remedia√ß√£o")
            
            # M√©tricas principais
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                immediate = remediation_timeline.get('immediate', 0)
                st.metric("üö® Imediato", immediate, help="1-2 semanas - A√ß√£o urgente")
            
            with col2:
                short_term = remediation_timeline.get('short_term', 0)
                st.metric("‚ö†Ô∏è Curto Prazo", short_term, help="2-4 semanas")
            
            with col3:
                medium_term = remediation_timeline.get('medium_term', 0)
                st.metric("üìÖ M√©dio Prazo", medium_term, help="1-3 meses")
            
            with col4:
                total_time = remediation_timeline.get('estimated_total_time', 'N/A')
                st.metric("‚è±Ô∏è Tempo Total", total_time)
            
            # Detalhes espec√≠ficos por viola√ß√£o
            timeline_details = remediation_timeline.get('details', [])
            if timeline_details:
                st.markdown("**üìã Detalhamento por Viola√ß√£o:**")
                
                for detail in timeline_details[:10]:  # Top 10 mais urgentes
                    violation = detail.get('violation', 'N/A')
                    timeline = detail.get('timeline', 'N/A')
                    reason = detail.get('reason', 'N/A')
                    penalty = detail.get('penalty_risk', 'N/A')
                    
                    # Emoji baseado na urg√™ncia
                    if "Imediato" in timeline:
                        emoji = "üî¥"
                        alert_type = "error"
                    elif "Curto" in timeline:
                        emoji = "üü°"
                        alert_type = "warning"
                    else:
                        emoji = "üü¢"
                        alert_type = "info"
                    
                    with st.expander(f"{emoji} {violation} - {timeline}"):
                        import streamlit as st
import json
import datetime
import base64
import io
import os
import re
import asyncio
import hashlib
from typing import Dict, List, Tuple, Any, Optional
from dataclasses import dataclass
from enum import Enum
import threading
import time

# Importa√ß√µes obrigat√≥rias
try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.colors import HexColor
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    PDF_AVAILABLE = True
except ImportError:
    st.error("‚ùå ReportLab √© obrigat√≥rio para funcionar!")
    st.stop()

try:
    import openai
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    st.error("‚ùå OpenAI √© OBRIGAT√ìRIO para an√°lise enterprise!")
    st.stop()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="AgentRisk Pro - Enterprise Analysis",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Classes para estrutura enterprise
class RiskLevel(Enum):
    CRITICAL = "Cr√≠tico"
    HIGH = "Alto"
    MEDIUM = "Moderado"
    LOW = "Baixo"
    MINIMAL = "M√≠nimo"

class ComplianceFramework(Enum):
    EU_AI_ACT = "EU AI Act"
    LGPD_BRAZIL = "LGPD Brasil"
    GDPR_EU = "GDPR Europa"
    SOX_US = "SOX Estados Unidos"
    BASEL_III = "Basel III"
    PCI_DSS = "PCI DSS"

@dataclass
class RiskAssessment:
    risk_id: str
    name: str
    category: str
    score: float
    level: RiskLevel
    evidence: List[str]
    compliance_impact: Dict[ComplianceFramework, str]
    technical_details: Dict[str, Any]
    remediation_priority: int
    estimated_cost: str
    timeline: str

@dataclass
class ComplianceViolation:
    framework: ComplianceFramework
    article: str
    description: str
    severity: RiskLevel
    evidence: List[str]
    remediation: List[str]
    penalty_risk: str

# Configura√ß√£o OpenAI OBRIGAT√ìRIA
@st.cache_resource
def get_openai_client():
    """Inicializa cliente OpenAI - OBRIGAT√ìRIO"""
    if not OPENAI_AVAILABLE:
        st.error("‚ùå OpenAI √© obrigat√≥rio para an√°lise enterprise!")
        st.stop()
    
    try:
        # Primeiro tenta secrets do Streamlit
        if "OPENAI_API_KEY" in st.secrets:
            client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        # Depois tenta vari√°vel de ambiente
        elif "OPENAI_API_KEY" in os.environ:
            client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
        else:
            st.error("‚ùå Configure OPENAI_API_KEY nos Secrets do Streamlit ou como vari√°vel de ambiente!")
            st.info("V√° em Settings > Secrets e adicione: OPENAI_API_KEY = 'sua-chave-aqui'")
            st.stop()
        
        # Teste obrigat√≥rio da API
        test_response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "test"}],
            max_tokens=5
        )
        
        return client
        
    except Exception as e:
        st.error(f"‚ùå Erro na configura√ß√£o OpenAI: {str(e)}")
        st.stop()

# CSS Enterprise
st.markdown("""
<style>
.enterprise-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2.5rem;
    border-radius: 15px;
    color: white;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
}

.risk-card-enterprise {
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1rem 0;
    background: white;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.risk-card-enterprise:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.15);
}

.risk-critical { 
    border-left: 6px solid #7f1d1d; 
    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%); 
}
.risk-high { 
    border-left: 6px solid #dc2626; 
    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%); 
}
.risk-medium { 
    border-left: 6px solid #f59e0b; 
    background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%); 
}
.risk-low { 
    border-left: 6px solid #10b981; 
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); 
}
.risk-minimal { 
    border-left: 6px solid #059669; 
    background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); 
}

.compliance-badge {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: bold;
    margin: 0.2rem;
}

.compliance-critical { background: #7f1d1d; color: white; }
.compliance-high { background: #dc2626; color: white; }
.compliance-medium { background: #f59e0b; color: white; }
.compliance-low { background: #10b981; color: white; }

.score-enterprise {
    text-align: center;
    padding: 3rem;
    border-radius: 20px;
    margin: 2rem 0;
    box-shadow: 0 8px 32px rgba(0,0,0,0.2);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.ai-analysis-badge {
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-weight: bold;
    display: inline-block;
    margin: 0.5rem 0;
}

.technical-detail {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 1rem;
    margin: 0.5rem 0;
    font-family: 'Courier New', monospace;
}
</style>
""", unsafe_allow_html=True)

# Riscos Enterprise Detalhados (baseados no relat√≥rio IBM)
ENTERPRISE_AGENTIC_RISKS = {
    "AGR001": {
        "nome": "Desalinhamento de Objetivos Cr√≠ticos",
        "categoria": "Governan√ßa Estrat√©gica",
        "descricao": "Agentes podem perseguir objetivos que conflitam com metas organizacionais",
        "compliance_frameworks": [ComplianceFramework.EU_AI_ACT, ComplianceFramework.SOX_US],
        "ai_analysis_required": True,
        "technical_patterns": ["goal", "objective", "target", "kpi", "metric"],
        "severity_indicators": ["hardcoded_goals", "no_validation", "conflicting_objectives"]
    },
    "AGR002": {
        "nome": "A√ß√µes Aut√¥nomas N√£o Supervisionadas",
        "categoria": "Controle Operacional",
        "descricao": "Execu√ß√£o de a√ß√µes cr√≠ticas sem aprova√ß√£o ou supervis√£o humana",
        "compliance_frameworks": [ComplianceFramework.EU_AI_ACT, ComplianceFramework.BASEL_III],
        "ai_analysis_required": True,
        "technical_patterns": ["autonomous", "auto_execute", "no_human_approval", "direct_action"],
        "severity_indicators": ["financial_transactions", "data_deletion", "system_changes"]
    },
    "AGR003": {
        "nome": "Uso Inadequado de APIs Cr√≠ticas",
        "categoria": "Seguran√ßa de Integra√ß√£o",
        "descricao": "Utiliza√ß√£o insegura de APIs financeiras e servi√ßos cr√≠ticos",
        "compliance_frameworks": [ComplianceFramework.PCI_DSS, ComplianceFramework.LGPD_BRAZIL],
        "ai_analysis_required": True,
        "technical_patterns": ["api_call", "external_service", "http_request", "webhook"],
        "severity_indicators": ["payment_api", "user_data_api", "admin_endpoints"]
    },
    "AGR004": {
        "nome": "Vi√©s Algor√≠tmico e Discrimina√ß√£o",
        "categoria": "√âtica e Fairness",
        "descricao": "Comportamentos discriminat√≥rios baseados em vi√©s nos dados ou algoritmos",
        "compliance_frameworks": [ComplianceFramework.EU_AI_ACT, ComplianceFramework.LGPD_BRAZIL],
        "ai_analysis_required": True,
        "technical_patterns": ["bias", "discrimination", "unfair", "stereotype"],
        "severity_indicators": ["demographic_filtering", "exclusion_rules", "prejudicial_logic"]
    },
    "AGR005": {
        "nome": "Reten√ß√£o Inadequada de Dados Sens√≠veis",
        "categoria": "Privacidade e Prote√ß√£o de Dados",
        "descricao": "Persist√™ncia inapropriada de informa√ß√µes pessoais e financeiras",
        "compliance_frameworks": [ComplianceFramework.LGPD_BRAZIL, ComplianceFramework.GDPR_EU],
        "ai_analysis_required": True,
        "technical_patterns": ["persist", "cache", "store", "memory", "retention"],
        "severity_indicators": ["personal_data", "financial_info", "no_encryption", "long_retention"]
    },
    "AGR006": {
        "nome": "Falta de Explicabilidade (Black Box)",
        "categoria": "Transpar√™ncia e Auditoria",
        "descricao": "Incapacidade de explicar decis√µes e processos do sistema",
        "compliance_frameworks": [ComplianceFramework.EU_AI_ACT, ComplianceFramework.SOX_US],
        "ai_analysis_required": True,
        "technical_patterns": ["unexplained", "black_box", "no_logging", "opaque"],
        "severity_indicators": ["financial_decisions", "no_audit_trail", "complex_ml"]
    },
    "AGR007": {
        "nome": "Vulnerabilidades de Seguran√ßa Cr√≠ticas",
        "categoria": "Ciberseguran√ßa",
        "descricao": "Exposi√ß√£o a ataques, inje√ß√µes e falhas de seguran√ßa",
        "compliance_frameworks": [ComplianceFramework.PCI_DSS, ComplianceFramework.SOX_US],
        "ai_analysis_required": True,
        "technical_patterns": ["eval", "exec", "sql_injection", "xss", "csrf"],
        "severity_indicators": ["user_input", "database_access", "admin_functions"]
    },
    "AGR008": {
        "nome": "N√£o Conformidade Regulat√≥ria",
        "categoria": "Compliance Legal",
        "descricao": "Viola√ß√£o de regulamenta√ß√µes espec√≠ficas do setor financeiro",
        "compliance_frameworks": [ComplianceFramework.EU_AI_ACT, ComplianceFramework.LGPD_BRAZIL, ComplianceFramework.BASEL_III],
        "ai_analysis_required": True,
        "technical_patterns": ["compliance", "regulation", "audit", "legal"],
        "severity_indicators": ["no_consent", "data_breach", "reporting_failure"]
    },
    "AGR009": {
        "nome": "Limita√ß√µes de Escalabilidade Cr√≠tica",
        "categoria": "Performance Operacional",
        "descricao": "Falhas na capacidade de escalar sob demanda alta",
        "compliance_frameworks": [ComplianceFramework.SOX_US, ComplianceFramework.BASEL_III],
        "ai_analysis_required": True,
        "technical_patterns": ["bottleneck", "timeout", "memory_leak", "performance"],
        "severity_indicators": ["single_point_failure", "no_load_balancing", "resource_exhaustion"]
    },
    "AGR010": {
        "nome": "Qualidade e Integridade de Dados",
        "categoria": "Governan√ßa de Dados",
        "descricao": "Problemas na qualidade, valida√ß√£o e integridade dos dados",
        "compliance_frameworks": [ComplianceFramework.SOX_US, ComplianceFramework.BASEL_III],
        "ai_analysis_required": True,
        "technical_patterns": ["validation", "sanitization", "data_quality", "integrity"],
        "severity_indicators": ["no_validation", "corrupted_data", "inconsistent_sources"]
    }
}

# Frameworks de Compliance Detalhados
COMPLIANCE_REQUIREMENTS = {
    ComplianceFramework.EU_AI_ACT: {
        "name": "EU AI Act",
        "description": "Regulamenta√ß√£o europeia para sistemas de IA",
        "articles": {
            "Art. 6": "Sistemas de IA de alto risco",
            "Art. 8": "Conformidade de sistemas de IA de alto risco",
            "Art. 9": "Sistema de gest√£o de risco",
            "Art. 10": "Dados e governan√ßa de dados",
            "Art. 11": "Documenta√ß√£o t√©cnica",
            "Art. 12": "Manuten√ß√£o de registros",
            "Art. 13": "Transpar√™ncia e fornecimento de informa√ß√µes",
            "Art. 14": "Supervis√£o humana",
            "Art. 15": "Precis√£o, robustez e ciberseguran√ßa"
        },
        "penalties": "At√© 7% do faturamento anual global"
    },
    ComplianceFramework.LGPD_BRAZIL: {
        "name": "LGPD Brasil",
        "description": "Lei Geral de Prote√ß√£o de Dados do Brasil",
        "articles": {
            "Art. 5": "Defini√ß√µes de dados pessoais",
            "Art. 6": "Atividades de tratamento de dados",
            "Art. 7": "Bases legais para tratamento",
            "Art. 8": "Consentimento",
            "Art. 9": "Dados sens√≠veis",
            "Art. 18": "Direitos do titular",
            "Art. 46": "Agentes de tratamento",
            "Art. 48": "Comunica√ß√£o de incidente de seguran√ßa"
        },
        "penalties": "At√© R$ 50 milh√µes por infra√ß√£o"
    }
}

class EnterpriseCodeAnalyzer:
    """Analisador Enterprise com IA Obrigat√≥ria"""
    
    def __init__(self, openai_client: OpenAI):
        self.client = openai_client
        self.analysis_cache = {}
        
    async def analyze_system_enterprise(self, uploaded_files) -> Dict:
        """An√°lise Enterprise Completa"""
        if not uploaded_files:
            return {"error": "Nenhum arquivo fornecido"}
        
        # Fase 1: An√°lise b√°sica dos arquivos
        files_data = []
        total_lines = 0
        
        progress_placeholder = st.empty()
        
        for i, uploaded_file in enumerate(uploaded_files):
            progress_placeholder.text(f"üìñ Analisando {uploaded_file.name}... ({i+1}/{len(uploaded_files)})")
            
            try:
                content = self._read_file_content(uploaded_file)
                if content:
                    file_analysis = await self._analyze_single_file_enterprise(uploaded_file.name, content)
                    files_data.append(file_analysis)
                    total_lines += file_analysis.get('lines_count', 0)
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao processar {uploaded_file.name}: {str(e)}")
                continue
        
        if not files_data:
            return {"error": "Nenhum arquivo v√°lido para an√°lise"}
        
        # Fase 2: An√°lise de Sistema Completa com IA
        progress_placeholder.text("ü§ñ Executando an√°lise sem√¢ntica com IA...")
        system_analysis = await self._ai_system_analysis(files_data)
        
        # Fase 3: An√°lise de Compliance
        progress_placeholder.text("‚öñÔ∏è Verificando conformidade regulat√≥ria...")
        compliance_analysis = await self._compliance_analysis(files_data, system_analysis)
        
        # Fase 4: An√°lise Cruzada Enterprise
        progress_placeholder.text("üîó An√°lise cruzada e arquitetural...")
        cross_analysis = await self._enterprise_cross_analysis(files_data, system_analysis)
        
        # Fase 5: Score Enterprise Final
        progress_placeholder.text("üìä Calculando score enterprise...")
        enterprise_score = self._calculate_enterprise_score(files_data, system_analysis, compliance_analysis, cross_analysis)
        
        progress_placeholder.text("‚úÖ An√°lise enterprise conclu√≠da!")
        
        return {
            "analysis_type": "Enterprise AI-Powered Analysis",
            "files_analyzed": len(files_data),
            "total_lines": total_lines,
            "enterprise_score": enterprise_score,
            "risk_level": self._get_enterprise_risk_level(enterprise_score["overall_score"]),
            "files_data": files_data,
            "system_analysis": system_analysis,
            "compliance_analysis": compliance_analysis,
            "cross_analysis": cross_analysis,
            "analysis_date": datetime.datetime.now().isoformat(),
            "analysis_hash": hashlib.md5(str(files_data).encode()).hexdigest()[:8],
            "ai_model_used": "gpt-4o-mini",
            "compliance_frameworks_checked": len(COMPLIANCE_REQUIREMENTS)
        }
    
    def _read_file_content(self, uploaded_file) -> str:
        """L√™ conte√∫do do arquivo com encoding robusto"""
        try:
            uploaded_file.seek(0)
            content = uploaded_file.read()
            
            # Tentar m√∫ltiplas codifica√ß√µes
            for encoding in ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1']:
                try:
                    return content.decode(encoding)
                except UnicodeDecodeError:
                    continue
            
            # Fallback para an√°lise bin√°ria
            return str(content)
        except Exception as e:
            st.error(f"Erro cr√≠tico ao ler {uploaded_file.name}: {str(e)}")
            return ""
    
    async def _analyze_single_file_enterprise(self, filename: str, content: str) -> Dict:
        """An√°lise Enterprise de arquivo individual com IA"""
        
        # Informa√ß√µes b√°sicas
        lines = content.split('\n')
        lines_count = len(lines)
        char_count = len(content)
        file_ext = os.path.splitext(filename.lower())[1][1:]
        
        # Classifica√ß√£o t√©cnica com IA
        classification = await self._ai_classify_file(filename, content)
        
        # Detec√ß√£o de riscos enterprise
        risk_assessments = await self._detect_enterprise_risks(content, filename)
        
        # An√°lise de seguran√ßa profunda
        security_analysis = await self._deep_security_analysis(content, filename)
        
        # Score do arquivo
        file_score = self._calculate_file_enterprise_score(risk_assessments, security_analysis, content)
        
        return {
            "filename": filename,
            "file_type": self._get_file_type(file_ext),
            "classification": classification,
            "lines_count": lines_count,
            "char_count": char_count,
            "file_score": file_score,
            "risk_level": self._get_enterprise_risk_level(file_score),
            "risk_assessments": risk_assessments,
            "security_analysis": security_analysis,
            "content_preview": content[:1000] + "..." if len(content) > 1000 else content,
            "critical_code_blocks": self._extract_critical_blocks(lines),
            "ai_insights": await self._ai_code_insights(content, filename)
        }
    
    async def _ai_classify_file(self, filename: str, content: str) -> Dict:
        """Classifica√ß√£o inteligente de arquivo com IA"""
        
        prompt = f"""
        Analise este arquivo de c√≥digo e classifique sua fun√ß√£o no sistema:
        
        Nome: {filename}
        Conte√∫do (primeiras 500 chars): {content[:500]}
        
        Retorne um JSON com:
        - category: tipo principal (security, api, data, config, ui, business_logic, testing, infrastructure)
        - purpose: descri√ß√£o espec√≠fica da fun√ß√£o
        - criticality: n√≠vel de criticidade (critical, high, medium, low)
        - architectural_role: papel na arquitetura
        - security_relevance: relev√¢ncia para seguran√ßa (0-10)
        
        Seja espec√≠fico e t√©cnico.
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=300,
                temperature=0.1
            )
            
            result = json.loads(response.choices[0].message.content)
            return result
            
        except Exception as e:
            # Fallback para classifica√ß√£o b√°sica
            return {
                "category": self._basic_classification(filename),
                "purpose": "An√°lise b√°sica - IA indispon√≠vel",
                "criticality": "medium",
                "architectural_role": "unknown",
                "security_relevance": 5,
                "error": str(e)
            }
    
    async def _detect_enterprise_risks(self, content: str, filename: str) -> List[RiskAssessment]:
        """Detec√ß√£o de riscos enterprise com an√°lise de IA"""
        
        risk_assessments = []
        content_lower = content.lower()
        
        for risk_id, risk_info in ENTERPRISE_AGENTIC_RISKS.items():
            
            # An√°lise com IA obrigat√≥ria
            ai_analysis = await self._ai_risk_analysis(content, filename, risk_info)
            
            # Detec√ß√£o de padr√µes t√©cnicos
            pattern_score = 0
            evidence = []
            
            for pattern in risk_info["technical_patterns"]:
                if pattern in content_lower:
                    pattern_score += 15
                    evidence.append(f"Padr√£o detectado: {pattern}")
            
            # Indicadores de severidade
            severity_score = 0
            for indicator in risk_info["severity_indicators"]:
                if indicator in content_lower:
                    severity_score += 25
                    evidence.append(f"Indicador cr√≠tico: {indicator}")
            
            # Score combinado (IA + Padr√µes)
            combined_score = (ai_analysis["score"] * 0.7) + (pattern_score * 0.2) + (severity_score * 0.1)
            combined_score = min(100, max(0, combined_score))
            
            # Impacto em Compliance
            compliance_impact = {}
            for framework in risk_info["compliance_frameworks"]:
                compliance_impact[framework] = await self._assess_compliance_impact(
                    framework, risk_info, ai_analysis
                )
            
            # Criar assessment
            assessment = RiskAssessment(
                risk_id=risk_id,
                name=risk_info["nome"],
                category=risk_info["categoria"],
                score=combined_score,
                level=self._score_to_risk_level(combined_score),
                evidence=evidence + ai_analysis["evidence"],
                compliance_impact=compliance_impact,
                technical_details=ai_analysis["technical_details"],
                remediation_priority=self._calculate_priority(combined_score, compliance_impact),
                estimated_cost=self._estimate_remediation_cost(combined_score),
                timeline=self._estimate_timeline(combined_score)
            )
            
            risk_assessments.append(assessment)
        
        return risk_assessments
    
    async def _ai_risk_analysis(self, content: str, filename: str, risk_info: Dict) -> Dict:
        """An√°lise espec√≠fica de risco com IA"""
        
        prompt = f"""
        Analise este c√≥digo para o risco espec√≠fico: {risk_info['nome']}
        
        Descri√ß√£o do Risco: {risk_info['descricao']}
        Categoria: {risk_info['categoria']}
        Arquivo: {filename}
        
        C√≥digo (primeiras 1000 chars):
        {content[:1000]}
        
        Retorne um JSON com:
        - score: pontua√ß√£o de risco 0-100
        - evidence: lista de evid√™ncias espec√≠ficas encontradas
        - technical_details: detalhes t√©cnicos do problema
        - recommendations: recomenda√ß√µes espec√≠ficas
        - severity_justification: justificativa da severidade
        
        Seja t√©cnico e espec√≠fico.
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.1
            )
            
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            return {
                "score": 30,
                "evidence": ["An√°lise IA indispon√≠vel"],
                "technical_details": {"error": str(e)},
                "recommendations": ["Verificar manualmente"],
                "severity_justification": "Score padr√£o aplicado"
            }
    
    async def _deep_security_analysis(self, content: str, filename: str) -> Dict:
        """An√°lise profunda de seguran√ßa com IA"""
        
        prompt = f"""
        Fa√ßa uma an√°lise profunda de seguran√ßa deste c√≥digo:
        
        Arquivo: {filename}
        C√≥digo: {content[:2000]}
        
        Analise especificamente:
        1. Vulnerabilidades de inje√ß√£o (SQL, XSS, Command)
        2. Falhas de autentica√ß√£o e autoriza√ß√£o
        3. Exposi√ß√£o de dados sens√≠veis
        4. Falhas de valida√ß√£o de entrada
        5. Configura√ß√µes inseguras
        6. Falhas de logging e monitoramento
        
        Retorne JSON com:
        - vulnerabilities: lista detalhada de vulnerabilidades
        - security_score: score 0-100 (0=muito seguro, 100=muito inseguro)
        - critical_issues: problemas cr√≠ticos imediatos
        - recommendations: recomenda√ß√µes espec√≠ficas de corre√ß√£o
        - owasp_categories: categorias OWASP Top 10 aplic√°veis
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.1
            )
            
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            return {
                "vulnerabilities": [],
                "security_score": 50,
                "critical_issues": [],
                "recommendations": ["An√°lise manual necess√°ria"],
                "owasp_categories": [],
                "error": str(e)
            }
    
    async def _ai_system_analysis(self, files_data: List[Dict]) -> Dict:
        """An√°lise de sistema completo com IA"""
        
        # Preparar contexto do sistema
        system_context = {
            "total_files": len(files_data),
            "file_types": list(set(f["file_type"] for f in files_data)),
            "classifications": [f["classification"] for f in files_data],
            "total_lines": sum(f["lines_count"] for f in files_data)
        }
        
        prompt = f"""
        Analise este sistema de software completo:
        
        Contexto do Sistema:
        - Total de arquivos: {system_context['total_files']}
        - Tipos de arquivo: {system_context['file_types']}
        - Total de linhas: {system_context['total_lines']}
        
        Classifica√ß√µes dos arquivos:
        {json.dumps(system_context['classifications'][:10], indent=2)}
        
        Forne√ßa uma an√°lise arquitetural completa em JSON:
        - architecture_assessment: avalia√ß√£o da arquitetura
        - security_posture: postura geral de seguran√ßa  
        - scalability_analysis: an√°lise de escalabilidade
        - maintainability_score: score de manutenibilidade 0-100
        - technical_debt_level: n√≠vel de d√©bito t√©cnico
        - deployment_readiness: prontid√£o para produ√ß√£o
        - risk_hotspots: √°reas de maior risco
        - strategic_recommendations: recomenda√ß√µes estrat√©gicas
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1000,
                temperature=0.2
            )
            
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            return {
                "architecture_assessment": "An√°lise IA indispon√≠vel",
                "security_posture": "Requer an√°lise manual",
                "scalability_analysis": "N√£o avaliado",
                "maintainability_score": 50,
                "technical_debt_level": "Medium",
                "deployment_readiness": "Requires assessment",
                "risk_hotspots": ["Manual analysis needed"],
                "strategic_recommendations": ["Enable AI analysis"],
                "error": str(e)
            }
    
    async def _compliance_analysis(self, files_data: List[Dict], system_analysis: Dict) -> Dict:
        """An√°lise detalhada de compliance com m√∫ltiplos frameworks"""
        
        compliance_violations = []
        framework_scores = {}
        
        for framework, requirements in COMPLIANCE_REQUIREMENTS.items():
            
            # An√°lise espec√≠fica por framework
            violations = await self._analyze_framework_compliance(files_data, framework, requirements)
            compliance_violations.extend(violations)
            
            # Score por framework
            framework_score = self._calculate_framework_score(violations)
            framework_scores[framework] = framework_score
        
        return {
            "overall_compliance_score": sum(framework_scores.values()) / len(framework_scores),
            "framework_scores": framework_scores,
            "violations": compliance_violations,
            "critical_violations": [v for v in compliance_violations if v.severity in [RiskLevel.CRITICAL, RiskLevel.HIGH]],
            "remediation_timeline": self._estimate_compliance_timeline(compliance_violations),
            "penalty_risk_assessment": self._assess_penalty_risks(compliance_violations)
        }
    
    async def _analyze_framework_compliance(self, files_data: List[Dict], framework: ComplianceFramework, requirements: Dict) -> List[ComplianceViolation]:
        """An√°lise de compliance para framework espec√≠fico"""
        
        violations = []
        
        # An√°lise com IA para compliance
        for file_data in files_data:
            ai_compliance = await self._ai_compliance_check(file_data, framework, requirements)
            
            for violation_data in ai_compliance.get("violations", []):
                violation = ComplianceViolation(
                    framework=framework,
                    article=violation_data.get("article", "N√£o especificado"),
                    description=violation_data.get("description", ""),
                    severity=RiskLevel(violation_data.get("severity", "MEDIUM")),
                    evidence=violation_data.get("evidence", []),
                    remediation=violation_data.get("remediation", []),
                    penalty_risk=violation_data.get("penalty_risk", "Baixo")
                )
                violations.append(violation)
        
        return violations
    
    async def _ai_compliance_check(self, file_data: Dict, framework: ComplianceFramework, requirements: Dict) -> Dict:
        """Verifica√ß√£o DETALHADA de compliance com IA - Implementa√ß√£o Completa"""
        
        content_preview = file_data.get("content_preview", "")
        filename = file_data.get("filename", "")
        file_type = file_data.get("file_type", "Unknown")
        
        # An√°lise espec√≠fica e detalhada por framework
        if framework == ComplianceFramework.EU_AI_ACT:
            prompt = f"""
            AN√ÅLISE ESPEC√çFICA EU AI ACT - {filename} ({file_type})
            
            C√≥digo a analisar:
            {content_preview[:1500]}
            
            Verifique ESPECIFICAMENTE cada artigo:
            
            üîç Art. 6 - SISTEMAS DE IA DE ALTO RISCO:
            - Este c√≥digo implementa sistema de IA que pode afetar decis√µes financeiras/credit√≠cias?
            - H√° processamento automatizado de dados pessoais para decis√µes cr√≠ticas?
            
            üîç Art. 8 - CONFORMIDADE DE SISTEMAS DE ALTO RISCO:  
            - Existe sistema de gest√£o da qualidade implementado?
            - H√° documenta√ß√£o t√©cnica adequada?
            
            üîç Art. 9 - SISTEMA DE GEST√ÉO DE RISCO:
            - H√° identifica√ß√£o e an√°lise de riscos conhecidos?
            - Existe processo de mitiga√ß√£o de riscos implementado?
            
            üîç Art. 13 - TRANSPAR√äNCIA:
            - O sistema informa aos usu√°rios que est√£o interagindo com IA?
            - H√° explica√ß√µes claras sobre como o sistema funciona?
            
            üîç Art. 14 - SUPERVIS√ÉO HUMANA:
            - Existe supervis√£o humana efetiva implementada?
            - Humanos podem intervir nas decis√µes do sistema?
            
            üîç Art. 15 - PRECIS√ÉO E ROBUSTEZ:
            - H√° valida√ß√£o de dados de entrada?
            - Existe tratamento de erros e falhas?
            
            RETORNE JSON EXATO:
            {{
                "violations": [
                    {{
                        "article": "Art. X",
                        "description": "descri√ß√£o espec√≠fica da viola√ß√£o",
                        "severity": "HIGH/MEDIUM/LOW", 
                        "evidence": ["evid√™ncia espec√≠fica no c√≥digo"],
                        "remediation": ["a√ß√£o espec√≠fica necess√°ria"],
                        "penalty_risk": "At√© 7% do faturamento anual (‚Ç¨35M m√°ximo)"
                    }}
                ],
                "compliance_score": 0-100,
                "specific_articles_violated": ["Art. X", "Art. Y"],
                "recommendations": ["recomenda√ß√£o espec√≠fica t√©cnica"]
            }}
            """
        
        elif framework == ComplianceFramework.LGPD_BRAZIL:
            prompt = f"""
            AN√ÅLISE ESPEC√çFICA LGPD BRASIL - {filename} ({file_type})
            
            C√≥digo a analisar:
            {content_preview[:1500]}
            
            Verifique ESPECIFICAMENTE cada artigo:
            
            üîç Art. 5 - DADOS PESSOAIS:
            - O c√≥digo processa informa√ß√µes que identifiquem pessoa natural?
            - H√° tratamento de dados sens√≠veis (origem racial, sa√∫de, etc.)?
            
            üîç Art. 7 - BASES LEGAIS:
            - H√° base legal clara para o tratamento (consentimento, contrato, etc.)?
            - O tratamento √© necess√°rio para finalidade espec√≠fica?
            
            üîç Art. 8 - CONSENTIMENTO:
            - Quando necess√°rio, h√° obten√ß√£o de consentimento livre e informado?
            - O consentimento pode ser revogado facilmente?
            
            üîç Art. 9 - DADOS SENS√çVEIS:
            - H√° tratamento de dados sens√≠veis sem consentimento espec√≠fico?
            - Existe prote√ß√£o adicional para dados sens√≠veis?
            
            üîç Art. 18 - DIREITOS DO TITULAR:
            - H√° implementa√ß√£o dos direitos (acesso, corre√ß√£o, elimina√ß√£o)?
            - Existe processo para atender solicita√ß√µes dos titulares?
            
            üîç Art. 46 - AGENTES DE TRATAMENTO:
            - H√° defini√ß√£o clara de controlador e operador?
            - Existe DPO (Data Protection Officer) quando necess√°rio?
            
            RETORNE JSON EXATO:
            {{
                "violations": [
                    {{
                        "article": "Art. X",
                        "description": "descri√ß√£o espec√≠fica da viola√ß√£o",
                        "severity": "HIGH/MEDIUM/LOW",
                        "evidence": ["evid√™ncia espec√≠fica no c√≥digo"], 
                        "remediation": ["a√ß√£o espec√≠fica necess√°ria"],
                        "penalty_risk": "At√© R$ 50 milh√µes por infra√ß√£o"
                    }}
                ],
                "compliance_score": 0-100,
                "specific_articles_violated": ["Art. X", "Art. Y"],
                "recommendations": ["recomenda√ß√£o espec√≠fica t√©cnica"]
            }}
            """
        
        elif framework == ComplianceFramework.GDPR_EU:
            prompt = f"""
            AN√ÅLISE ESPEC√çFICA GDPR - {filename} ({file_type})
            
            Verifique artigos espec√≠ficos:
            - Art. 6: Base legal para processamento
            - Art. 7: Condi√ß√µes para consentimento  
            - Art. 25: Data protection by design
            - Art. 32: Seguran√ßa no processamento
            - Art. 35: Avalia√ß√£o de impacto
            
            C√≥digo: {content_preview[:1500]}
            
            RETORNE JSON com violations espec√≠ficas, penalty_risk: "At√© 4% do faturamento anual (‚Ç¨20M m√°ximo)"
            """
        
        elif framework == ComplianceFramework.SOX_US:
            prompt = f"""
            AN√ÅLISE ESPEC√çFICA SOX (Sarbanes-Oxley) - {filename} ({file_type})
            
            Verifique se√ß√µes espec√≠ficas:
            - Se√ß√£o 302: Responsabilidade executiva
            - Se√ß√£o 404: Controles internos
            - Se√ß√£o 409: Divulga√ß√£o em tempo real
            - Se√ß√£o 906: Responsabilidade criminal
            
            C√≥digo: {content_preview[:1500]}
            
            RETORNE JSON com violations espec√≠ficas, penalty_risk: "Multas de at√© $5M + pris√£o"
            """
        
        elif framework == ComplianceFramework.BASEL_III:
            prompt = f"""
            AN√ÅLISE ESPEC√çFICA BASEL III - {filename} ({file_type})
            
            Verifique pilares espec√≠ficos:
            - Pilar 1: Requisitos m√≠nimos de capital
            - Pilar 2: Processo de supervis√£o
            - Pilar 3: Disciplina de mercado
            - Gest√£o de risco operacional
            
            C√≥digo: {content_preview[:1500]}
            
            RETORNE JSON com violations espec√≠ficas, penalty_risk: "San√ß√µes regulat√≥rias + perda de licen√ßa"
            """
        
        elif framework == ComplianceFramework.PCI_DSS:
            prompt = f"""
            AN√ÅLISE ESPEC√çFICA PCI DSS - {filename} ({file_type})
            
            Verifique requisitos espec√≠ficos:
            - Req. 1: Firewall e configura√ß√£o de rede
            - Req. 2: Senhas padr√£o e par√¢metros de seguran√ßa
            - Req. 3: Prote√ß√£o de dados do portador do cart√£o
            - Req. 4: Criptografia na transmiss√£o
            - Req. 6: Desenvolvimento seguro
            - Req. 8: Identifica√ß√£o √∫nica para acesso
            
            C√≥digo: {content_preview[:1500]}
            
            RETORNE JSON com violations espec√≠ficas, penalty_risk: "Multas de $50K-$500K por m√™s"
            """
        
        else:
            prompt = f"An√°lise gen√©rica de compliance para {framework.value} - arquivo {filename}"
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.1
            )
            
            result = json.loads(response.choices[0].message.content)
            
            # Garantir estrutura padr√£o
            if "violations" not in result:
                result["violations"] = []
            if "compliance_score" not in result:
                result["compliance_score"] = 70
            if "specific_articles_violated" not in result:
                result["specific_articles_violated"] = []
            if "recommendations" not in result:
                result["recommendations"] = []
            
            return result
            
        except Exception as e:
            # Fallback com an√°lise b√°sica real
            violations = self._basic_compliance_analysis(content_preview, framework, filename)
            
            return {
                "violations": violations,
                "compliance_score": max(0, 80 - len(violations) * 15),
                "specific_articles_violated": [v["article"] for v in violations],
                "recommendations": [f"Revisar {framework.value} manualmente"],
                "error": str(e)
            }
    
    def _basic_compliance_analysis(self, content: str, framework: ComplianceFramework, filename: str) -> List[Dict]:
        """An√°lise b√°sica de compliance quando IA falha"""
        
        violations = []
        content_lower = content.lower()
        
        if framework == ComplianceFramework.EU_AI_ACT:
            # Verifica√ß√µes espec√≠ficas do AI Act
            if any(term in content_lower for term in ['decision', 'predict', 'classify', 'recommend']):
                if 'human' not in content_lower and 'approval' not in content_lower:
                    violations.append({
                        "article": "Art. 14",
                        "description": "Sistema de IA sem supervis√£o humana adequada detectado",
                        "severity": "HIGH",
                        "evidence": [f"Decis√µes automatizadas em {filename}"],
                        "remediation": ["Implementar supervis√£o humana", "Adicionar aprova√ß√£o manual"],
                        "penalty_risk": "At√© 7% do faturamento anual (‚Ç¨35M m√°ximo)"
                    })
            
            if 'transparent' not in content_lower and 'explain' not in content_lower:
                violations.append({
                    "article": "Art. 13", 
                    "description": "Falta de transpar√™ncia no sistema de IA",
                    "severity": "MEDIUM",
                    "evidence": [f"Aus√™ncia de explicabilidade em {filename}"],
                    "remediation": ["Implementar explicabilidade", "Adicionar logs de decis√£o"],
                    "penalty_risk": "At√© 7% do faturamento anual (‚Ç¨35M m√°ximo)"
                })
        
        elif framework == ComplianceFramework.LGPD_BRAZIL:
            # Verifica√ß√µes espec√≠ficas da LGPD
            if any(term in content_lower for term in ['cpf', 'email', 'phone', 'address', 'personal']):
                if 'consent' not in content_lower and 'legal_basis' not in content_lower:
                    violations.append({
                        "article": "Art. 7",
                        "description": "Tratamento de dados pessoais sem base legal clara",
                        "severity": "HIGH", 
                        "evidence": [f"Dados pessoais processados em {filename}"],
                        "remediation": ["Definir base legal", "Implementar consentimento"],
                        "penalty_risk": "At√© R$ 50 milh√µes por infra√ß√£o"
                    })
            
            if any(term in content_lower for term in ['health', 'race', 'religion', 'biometric']):
                violations.append({
                    "article": "Art. 9",
                    "description": "Poss√≠vel tratamento de dados sens√≠veis detectado",
                    "severity": "HIGH",
                    "evidence": [f"Ind√≠cios de dados sens√≠veis em {filename}"],
                    "remediation": ["Implementar prote√ß√µes especiais", "Obter consentimento espec√≠fico"],
                    "penalty_risk": "At√© R$ 50 milh√µes por infra√ß√£o"
                })
        
        elif framework == ComplianceFramework.PCI_DSS:
            # Verifica√ß√µes espec√≠ficas PCI DSS
            if any(term in content_lower for term in ['card', 'credit', 'payment', 'pan']):
                if 'encrypt' not in content_lower and 'hash' not in content_lower:
                    violations.append({
                        "article": "Req. 3",
                        "description": "Dados de cart√£o sem prote√ß√£o criptogr√°fica adequada",
                        "severity": "HIGH",
                        "evidence": [f"Dados de pagamento n√£o criptografados em {filename}"],
                        "remediation": ["Implementar criptografia", "Aplicar tokeniza√ß√£o"],
                        "penalty_risk": "Multas de $50K-$500K por m√™s"
                    })
        
        return violations
    
    async def _enterprise_cross_analysis(self, files_data: List[Dict], system_analysis: Dict) -> Dict:
        """An√°lise cruzada enterprise entre arquivos"""
        
        # An√°lise de depend√™ncias
        dependency_risks = await self._analyze_dependencies(files_data)
        
        # An√°lise de comunica√ß√£o entre componentes
        integration_risks = await self._analyze_integrations(files_data)
        
        # An√°lise de arquitetura de seguran√ßa
        security_architecture = await self._analyze_security_architecture(files_data)
        
        # Single points of failure
        spof_analysis = self._identify_single_points_failure(files_data)
        
        return {
            "dependency_risks": dependency_risks,
            "integration_risks": integration_risks,
            "security_architecture": security_architecture,
            "single_points_failure": spof_analysis,
            "system_complexity_score": self._calculate_complexity_score(files_data),
            "architectural_recommendations": await self._ai_architectural_recommendations(files_data, system_analysis)
        }
    
    async def _analyze_dependencies(self, files_data: List[Dict]) -> List[Dict]:
        """An√°lise de riscos de depend√™ncias"""
        
        dependency_risks = []
        
        for file_data in files_data:
            content = file_data.get("content_preview", "")
            
            # Buscar imports e depend√™ncias
            import_patterns = [
                r"import\s+(\w+)",
                r"from\s+(\w+)\s+import",
                r"require\s*\(['\"]([^'\"]+)['\"]\)",
                r"@import\s+['\"]([^'\"]+)['\"]"
            ]
            
            dependencies = []
            for pattern in import_patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                dependencies.extend(matches)
            
            if dependencies:
                # An√°lise com IA das depend√™ncias
                ai_dep_analysis = await self._ai_dependency_analysis(dependencies, file_data["filename"])
                
                dependency_risks.append({
                    "file": file_data["filename"],
                    "dependencies": dependencies[:10],  # Limitar para n√£o sobrecarregar
                    "risk_score": ai_dep_analysis.get("risk_score", 30),
                    "critical_dependencies": ai_dep_analysis.get("critical_dependencies", []),
                    "recommendations": ai_dep_analysis.get("recommendations", [])
                })
        
        return dependency_risks
    
    async def _ai_dependency_analysis(self, dependencies: List[str], filename: str) -> Dict:
        """An√°lise de depend√™ncias com IA"""
        
        prompt = f"""
        Analise estas depend√™ncias do arquivo {filename}:
        
        Depend√™ncias: {dependencies[:20]}
        
        Avalie os riscos:
        1. Depend√™ncias desatualizadas conhecidas
        2. Bibliotecas com vulnerabilidades
        3. Depend√™ncias n√£o mantidas
        4. Conflitos potenciais
        5. Depend√™ncias desnecess√°rias
        
        Retorne JSON com:
        - risk_score: 0-100
        - critical_dependencies: lista de depend√™ncias cr√≠ticas
        - recommendations: recomenda√ß√µes espec√≠ficas
        - vulnerability_alerts: alertas de vulnerabilidade
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=400,
                temperature=0.1
            )
            
            return json.loads(response.choices[0].message.content)
            
        except Exception:
            return {
                "risk_score": 30,
                "critical_dependencies": [],
                "recommendations": ["Verificar manualmente"],
                "vulnerability_alerts": []
            }
    
    def _calculate_enterprise_score(self, files_data: List[Dict], system_analysis: Dict, 
                                  compliance_analysis: Dict, cross_analysis: Dict) -> Dict:
        """C√°lculo do score enterprise final"""
        
        # Scores componentes
        avg_file_score = sum(f["file_score"] for f in files_data) / len(files_data) if files_data else 0
        system_score = system_analysis.get("maintainability_score", 50)
        compliance_score = compliance_analysis.get("overall_compliance_score", 70)
        architecture_score = 100 - cross_analysis.get("system_complexity_score", 30)
        
        # Peso dos componentes
        weights = {
            "files": 0.25,
            "system": 0.25,
            "compliance": 0.35,  # Maior peso para compliance
            "architecture": 0.15
        }
        
        # Score final ponderado
        overall_score = (
            avg_file_score * weights["files"] +
            system_score * weights["system"] +
            compliance_score * weights["compliance"] +
            architecture_score * weights["architecture"]
        )
        
        # Penalidades cr√≠ticas
        critical_violations = len(compliance_analysis.get("critical_violations", []))
        if critical_violations > 0:
            overall_score += min(critical_violations * 15, 40)  # Penalidade m√°xima de 40 pontos
        
        overall_score = min(100, max(0, overall_score))
        
        return {
            "overall_score": round(overall_score, 1),
            "component_scores": {
                "files_average": round(avg_file_score, 1),
                "system_analysis": round(system_score, 1),
                "compliance": round(compliance_score, 1),
                "architecture": round(architecture_score, 1)
            },
            "critical_violations_penalty": critical_violations * 15,
            "risk_distribution": self._calculate_risk_distribution(files_data),
            "priority_actions": self._identify_priority_actions(compliance_analysis, cross_analysis)
        }
    
    def _get_enterprise_risk_level(self, score: float) -> RiskLevel:
        """Converte score em n√≠vel de risco enterprise"""
        if score >= 80:
            return RiskLevel.CRITICAL
        elif score >= 65:
            return RiskLevel.HIGH
        elif score >= 40:
            return RiskLevel.MEDIUM
        elif score >= 20:
            return RiskLevel.LOW
        else:
            return RiskLevel.MINIMAL
    
    def _score_to_risk_level(self, score: float) -> RiskLevel:
        """Converte score num√©rico para enum RiskLevel"""
        return self._get_enterprise_risk_level(score)
    
    def _calculate_priority(self, score: float, compliance_impact: Dict) -> int:
        """Calcula prioridade de remedia√ß√£o (1-5, sendo 1 mais urgente)"""
        base_priority = 5 - int(score / 20)  # Score alto = prioridade alta
        
        # Ajustar por impacto em compliance
        critical_frameworks = sum(1 for impact in compliance_impact.values() 
                                if "critical" in impact.lower() or "high" in impact.lower())
        
        priority = max(1, base_priority - critical_frameworks)
        return min(5, priority)
    
    def _estimate_remediation_cost(self, score: float) -> str:
        """Estima custo de remedia√ß√£o"""
        if score >= 80:
            return "Alto (R$ 50k - R$ 200k)"
        elif score >= 65:
            return "M√©dio-Alto (R$ 20k - R$ 50k)"
        elif score >= 40:
            return "M√©dio (R$ 5k - R$ 20k)"
        elif score >= 20:
            return "Baixo (R$ 1k - R$ 5k)"
        else:
            return "M√≠nimo (< R$ 1k)"
    
    def _estimate_timeline(self, score: float) -> str:
        """Estima timeline de remedia√ß√£o"""
        if score >= 80:
            return "Imediato (1-2 semanas)"
        elif score >= 65:
            return "Urgente (2-4 semanas)"
        elif score >= 40:
            return "M√©dio prazo (1-2 meses)"
        elif score >= 20:
            return "Longo prazo (2-3 meses)"
        else:
            return "Planejado (3+ meses)"
    
    # M√©todos auxiliares
    def _get_file_type(self, extension: str) -> str:
        """Retorna tipo do arquivo baseado na extens√£o"""
        type_map = {
            'py': 'Python', 'js': 'JavaScript', 'ts': 'TypeScript',
            'java': 'Java', 'cs': 'C#', 'php': 'PHP', 'rb': 'Ruby',
            'go': 'Go', 'cpp': 'C++', 'c': 'C', 'json': 'JSON',
            'yaml': 'YAML', 'yml': 'YAML', 'xml': 'XML',
            'sql': 'SQL', 'md': 'Markdown', 'txt': 'Text',
            'html': 'HTML', 'css': 'CSS', 'scss': 'SCSS'
        }
        return type_map.get(extension, 'Unknown')
    
    def _basic_classification(self, filename: str) -> str:
        """Classifica√ß√£o b√°sica fallback"""
        filename_lower = filename.lower()
        
        if any(term in filename_lower for term in ['main', 'app', 'index']):
            return "entry_point"
        elif any(term in filename_lower for term in ['auth', 'login', 'security']):
            return "security"
        elif any(term in filename_lower for term in ['config', 'setting']):
            return "configuration"
        elif any(term in filename_lower for term in ['api', 'route']):
            return "api_layer"
        elif any(term in filename_lower for term in ['model', 'schema']):
            return "data_model"
        elif any(term in filename_lower for term in ['test', 'spec']):
            return "testing"
        else:
            return "business_logic"

# Gerador de Relat√≥rios Enterprise
class EnterprisePDFGenerator:
    """Gerador de relat√≥rios PDF enterprise"""
    
    def generate_enterprise_report(self, analysis_result: Dict) -> bytes:
        """Gera relat√≥rio PDF enterprise completo"""
        buffer = io.BytesIO()
        
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # Cabe√ßalho Enterprise
        title = Paragraph("AgentRisk Pro - Relat√≥rio Enterprise de An√°lise de IA", styles['Title'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Resumo Executivo
        story.append(Paragraph("RESUMO EXECUTIVO", styles['Heading1']))
        
        executive_summary = f"""
        <b>Score Geral do Sistema:</b> {analysis_result['enterprise_score']['overall_score']}/100<br/>
        <b>N√≠vel de Risco:</b> {analysis_result['risk_level'].value}<br/>
        <b>Arquivos Analisados:</b> {analysis_result['files_analyzed']}<br/>
        <b>Total de Linhas:</b> {analysis_result['total_lines']:,}<br/>
        <b>Frameworks de Compliance:</b> {analysis_result['compliance_frameworks_checked']}<br/>
        <b>Modelo de IA Utilizado:</b> {analysis_result['ai_model_used']}<br/>
        <b>Data da An√°lise:</b> {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}<br/>
        """
        
        story.append(Paragraph(executive_summary, styles['Normal']))
        story.append(Spacer(1, 30))
        
        # An√°lise de Compliance
        if 'compliance_analysis' in analysis_result:
            story.append(Paragraph("AN√ÅLISE DE CONFORMIDADE REGULAT√ìRIA", styles['Heading2']))
            
            compliance = analysis_result['compliance_analysis']
            
            compliance_table_data = [
                ['Framework', 'Score', 'Status', 'Viola√ß√µes Cr√≠ticas']
            ]
            
            for framework, score in compliance.get('framework_scores', {}).items():
                status = "‚úÖ Conforme" if score >= 80 else "‚ö†Ô∏è Aten√ß√£o" if score >= 60 else "‚ùå N√£o Conforme"
                critical_count = len([v for v in compliance.get('violations', []) 
                                    if v.framework == framework and v.severity in [RiskLevel.CRITICAL, RiskLevel.HIGH]])
                
                compliance_table_data.append([
                    framework.value,
                    f"{score:.1f}/100",
                    status,
                    str(critical_count)
                ])
            
            compliance_table = Table(compliance_table_data, colWidths=[120, 60, 80, 80])
            compliance_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), HexColor('#4a5568')),
                ('TEXTCOLOR', (0, 0), (-1, 0), HexColor('#ffffff')),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 1, HexColor('#000000'))
            ]))
            
            story.append(compliance_table)
            story.append(Spacer(1, 20))
        
        # Top Riscos Cr√≠ticos
        story.append(Paragraph("TOP 5 RISCOS CR√çTICOS IDENTIFICADOS", styles['Heading2']))
        
        # Ordenar riscos por score
        all_risks = []
        for file_data in analysis_result.get('files_data', []):
            for risk in file_data.get('risk_assessments', []):
                all_risks.append(risk)
        
        top_risks = sorted(all_risks, key=lambda x: x.score, reverse=True)[:5]
        
        for i, risk in enumerate(top_risks, 1):
            risk_color = '#7f1d1d' if risk.level == RiskLevel.CRITICAL else '#dc2626' if risk.level == RiskLevel.HIGH else '#f59e0b'
            
            risk_text = f"""
            <font color='{risk_color}'><b>{i}. {risk.name}</b></font><br/>
            <b>Score:</b> {risk.score:.1f}/100 | <b>N√≠vel:</b> {risk.level.value}<br/>
            <b>Categoria:</b> {risk.category}<br/>
            <b>Prioridade:</b> {risk.remediation_priority}/5 | <b>Custo Estimado:</b> {risk.estimated_cost}<br/>
            <b>Timeline:</b> {risk.timeline}<br/>
            """
            
            if risk.evidence:
                risk_text += f"<b>Evid√™ncias:</b> {'; '.join(risk.evidence[:3])}<br/>"
            
            story.append(Paragraph(risk_text, styles['Normal']))
            story.append(Spacer(1, 15))
        
        # Recomenda√ß√µes Estrat√©gicas
        story.append(Spacer(1, 20))
        story.append(Paragraph("RECOMENDA√á√ïES ESTRAT√âGICAS", styles['Heading2']))
        
        if 'system_analysis' in analysis_result:
            recommendations = analysis_result['system_analysis'].get('strategic_recommendations', [])
            for i, rec in enumerate(recommendations[:5], 1):
                rec_text = f"<b>{i}.</b> {rec}"
                story.append(Paragraph(rec_text, styles['Normal']))
                story.append(Spacer(1, 8))
        
        # Metodologia
        story.append(Spacer(1, 30))
        story.append(Paragraph("METODOLOGIA DE AN√ÅLISE", styles['Heading2']))
        
        methodology_text = """
        <b>An√°lise Enterprise com IA:</b><br/>
        ‚Ä¢ An√°lise sem√¢ntica profunda com GPT-4o-mini<br/>
        ‚Ä¢ Detec√ß√£o de 10 categorias de risco espec√≠ficas para IA Aut√¥noma<br/>
        ‚Ä¢ Verifica√ß√£o de conformidade com EU AI Act e LGPD<br/>
        ‚Ä¢ An√°lise cruzada de depend√™ncias e arquitetura<br/>
        ‚Ä¢ Score ponderado considerando compliance, seguran√ßa e arquitetura<br/><br/>
        
        <b>Baseado em:</b> IBM Consulting - "Agentic AI in Financial Services" (Maio/2025)<br/>
        <b>Frameworks Analisados:</b> EU AI Act, LGPD, GDPR, SOX, Basel III, PCI DSS
        """
        
        story.append(Paragraph(methodology_text, styles['Normal']))
        
        # Rodap√©
        story.append(Spacer(1, 40))
        footer_text = f"""
        <b>Relat√≥rio gerado pelo AgentRisk Pro Enterprise</b><br/>
        Hash da An√°lise: {analysis_result.get('analysis_hash', 'N/A')}<br/>
        Confidencial - Uso interno exclusivo
        """
        story.append(Paragraph(footer_text, styles['Normal']))
        
        # Gerar PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()

# Interface Principal Enterprise
def main():
    """Interface principal enterprise"""
    
    # Verificar cliente OpenAI primeiro
    try:
        client = get_openai_client()
        st.session_state.openai_client = client
    except Exception:
        return  # O erro j√° foi tratado em get_openai_client()
    
    # Header Enterprise
    st.markdown("""
    <div class="enterprise-header">
        <h1>üõ°Ô∏è AgentRisk Pro</h1>
        <h3>Enterprise AI-Powered Risk Analysis</h3>
        <p>An√°lise Profunda de Riscos em Sistemas de IA Aut√¥noma</p>
        <div class="ai-analysis-badge">‚ú® IA Obrigat√≥ria ‚Ä¢ Compliance Avan√ßado ‚Ä¢ N√≠vel Enterprise</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Status Enterprise
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.success("‚úÖ OpenAI GPT-4o-mini")
    with col2:
        st.success("‚úÖ ReportLab PDF")
    with col3:
        st.success("‚úÖ 10 Riscos IA Enterprise")
    with col4:
        st.success("‚úÖ 6 Frameworks Compliance")
    
    # Sidebar Enterprise
    with st.sidebar:
        st.header("üéõÔ∏è AgentRisk Pro")
        
        page = st.selectbox("M√≥dulos:", [
            "üîç An√°lise Enterprise", 
            "üìä Dashboard Executivo", 
            "‚öñÔ∏è Compliance Center",
            "üèóÔ∏è Arquitetura & Deps",
            "‚öôÔ∏è Configura√ß√µes"
        ])
        
        # Status da √∫ltima an√°lise
        if 'enterprise_analysis' in st.session_state:
            result = st.session_state.enterprise_analysis
            st.markdown("---")
            st.markdown("**üìä √öltima An√°lise Enterprise**")
            
            score = result.get('enterprise_score', {}).get('overall_score', 0)
            risk_level = result.get('risk_level', RiskLevel.MEDIUM)
            
            score_color = "üî¥" if score >= 65 else "üü°" if score >= 40 else "üü¢"
            
            st.info(f"""
            {score_color} **Score:** {score}/100
            **N√≠vel:** {risk_level.value}
            **Arquivos:** {result.get('files_analyzed', 0)}
            **Linhas:** {result.get('total_lines', 0):,}
            **IA:** {result.get('ai_model_used', 'N/A')}
            """)
            
            if st.button("üóëÔ∏è Limpar An√°lise"):
                del st.session_state.enterprise_analysis
                st.rerun()
    
    # Roteamento de p√°ginas
    if page == "üîç An√°lise Enterprise":
        show_enterprise_analysis_page()
    elif page == "üìä Dashboard Executivo":
        show_executive_dashboard()
    elif page == "‚öñÔ∏è Compliance Center":
        show_compliance_center()
    elif page == "üèóÔ∏è Arquitetura & Deps":
        show_architecture_analysis()
    else:
        show_enterprise_config()

def show_enterprise_analysis_page():
    """P√°gina principal de an√°lise enterprise"""
    
    st.header("üîç An√°lise Enterprise de Sistema IA")
    
    # Se j√° tem an√°lise, mostrar resultados
    if 'enterprise_analysis' in st.session_state:
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("üîÑ Nova An√°lise Enterprise", type="secondary"):
                del st.session_state.enterprise_analysis
                st.rerun()
        with col2:
            st.success("‚úÖ **An√°lise Enterprise conclu√≠da** - Resultados detalhados abaixo")
        
        show_enterprise_results(st.session_state.enterprise_analysis)
        return
    
    # Interface de upload enterprise
    st.markdown("### üì§ Upload do Sistema para An√°lise Enterprise")
    
    st.info("""
    üéØ **An√°lise Enterprise Inclui:**
    
    **ü§ñ IA Obrigat√≥ria:** An√°lise sem√¢ntica profunda com GPT-4o-mini
    **‚öñÔ∏è Compliance Avan√ßado:** EU AI Act, LGPD, GDPR, SOX, Basel III, PCI DSS
    **üèóÔ∏è Arquitetura:** An√°lise de depend√™ncias, SPOF, integra√ß√£o
    **üõ°Ô∏è Seguran√ßa:** OWASP Top 10, vulnerabilidades cr√≠ticas
    **üìä Score Enterprise:** Pondera√ß√£o inteligente com foco em compliance
    """)
    
    uploaded_files = st.file_uploader(
        "Selecione os arquivos do sistema",
        accept_multiple_files=True,
        type=['py', 'js', 'ts', 'java', 'cs', 'php', 'rb', 'go', 'cpp', 'c',
              'json', 'yaml', 'yml', 'xml', 'sql', 'md', 'txt', 'html', 'css'],
        help="Todos os tipos de arquivo de c√≥digo, configura√ß√£o e documenta√ß√£o"
    )
    
    if uploaded_files:
        st.success(f"‚úÖ **{len(uploaded_files)} arquivo(s) carregado(s)** para an√°lise enterprise")
        
        # Preview detalhado dos arquivos
        with st.expander("üìã Arquivos Carregados - Preview", expanded=True):
            total_size = 0
            
            for file in uploaded_files:
                file_ext = os.path.splitext(file.name.lower())[1][1:]
                analyzer = EnterpriseCodeAnalyzer(st.session_state.openai_client)
                file_type = analyzer._get_file_type(file_ext)
                total_size += file.size
                
                col1, col2, col3 = st.columns([3, 1, 1])
                with col1:
                    st.write(f"üìÑ **{file.name}**")
                with col2:
                    st.write(f"*{file_type}*")
                with col3:
                    st.write(f"`{file.size:,} bytes`")
            
            st.write(f"**üìä Total:** {len(uploaded_files)} arquivos ‚Ä¢ {total_size:,} bytes")
        
        # Bot√£o de an√°lise enterprise
        if st.button("üöÄ Executar An√°lise Enterprise Completa", type="primary", use_container_width=True):
            
            # An√°lise ass√≠ncrona enterprise
            async def run_enterprise_analysis():
                analyzer = EnterpriseCodeAnalyzer(st.session_state.openai_client)
                return await analyzer.analyze_system_enterprise(uploaded_files)
            
            with st.spinner("üîÑ Executando an√°lise enterprise completa..."):
                
                # Simular async com threading (Streamlit n√£o suporta async diretamente)
                import asyncio
                import threading
                
                result_container = {}
                
                def run_analysis():
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    result = loop.run_until_complete(run_enterprise_analysis())
                    result_container['result'] = result
                    loop.close()
                
                # Progress bar detalhado
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Executar an√°lise em thread separada
                analysis_thread = threading.Thread(target=run_analysis)
                analysis_thread.start()
                
                # Simular progresso
                for i in range(101):
                    progress_bar.progress(i)
                    if i < 15:
                        status_text.text("ü§ñ Inicializando an√°lise com IA...")
                
                "
