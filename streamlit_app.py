import streamlit as st
import json
import datetime
import base64
import io
from typing import Dict, List, Tuple
import re

# Importa√ß√µes condicionais para evitar erros
try:
    from fpdf import FPDF
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False
    st.warning("üìÑ Gera√ß√£o de PDF indispon√≠vel. Instale fpdf2 para ativar esta funcionalidade.")

try:
    import openai
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    st.warning("ü§ñ OpenAI indispon√≠vel. Usando an√°lise baseada em regras.")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="AgentRisk - Avalia√ß√£o de Riscos em IA Aut√¥noma",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√£o da OpenAI
@st.cache_resource
def get_openai_client():
    """Inicializa cliente OpenAI com chave dos secrets"""
    if not OPENAI_AVAILABLE:
        return None
        
    try:
        if "OPENAI_API_KEY" in st.secrets:
            api_key = st.secrets["OPENAI_API_KEY"]
            return OpenAI(api_key=api_key)
        else:
            st.info("üí° Configure OPENAI_API_KEY nos Secrets para ativar an√°lise avan√ßada com IA")
            return None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Problema na configura√ß√£o OpenAI: {str(e)}")
        return None

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3a8a 0%, #3b82f6 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .risk-card {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        background: white;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .risk-high { border-left: 5px solid #dc2626; }
    .risk-medium { border-left: 5px solid #f59e0b; }
    .risk-low { border-left: 5px solid #10b981; }
    .score-container {
        text-align: center;
        padding: 2rem;
        border-radius: 10px;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .score-high { background: #fef2f2; border: 2px solid #dc2626; }
    .score-medium { background: #fffbeb; border: 2px solid #f59e0b; }
    .score-low { background: #f0fdf4; border: 2px solid #10b981; }
    .integration-button {
        background: linear-gradient(45deg, #10b981, #059669);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: bold;
    }
    .stButton > button {
        width: 100%;
    }
</style>
""", unsafe_allow_html=True)

# Defini√ß√£o dos 15 riscos baseados no documento IBM
AGENTIC_AI_RISKS = {
    "1": {
        "nome": "Desalinhamento de Objetivos",
        "descricao": "Agente pode buscar objetivos diferentes dos pretendidos pela organiza√ß√£o",
        "categoria": "Governan√ßa",
        "keywords": ["objetivo", "meta", "prop√≥sito", "direcionamento", "alinhamento"]
    },
    "2": {
        "nome": "A√ß√µes Aut√¥nomas Indesejadas",
        "descricao": "Execu√ß√£o de a√ß√µes sem aprova√ß√£o humana adequada em contextos cr√≠ticos",
        "categoria": "Autonomia",
        "keywords": ["aut√¥nomo", "autom√°tico", "sem supervis√£o", "independente"]
    },
    "3": {
        "nome": "Uso Indevido de APIs",
        "descricao": "Utiliza√ß√£o inadequada ou excessiva de APIs e servi√ßos externos",
        "categoria": "Integra√ß√£o",
        "keywords": ["api", "servi√ßo externo", "integra√ß√£o", "chamada", "endpoint"]
    },
    "4": {
        "nome": "Decep√ß√£o e Vi√©s de Persona",
        "descricao": "Comportamentos enganosos ou enviesados baseados na persona do agente",
        "categoria": "Comportamento",
        "keywords": ["persona", "comportamento", "vi√©s", "enganoso", "manipula√ß√£o"]
    },
    "5": {
        "nome": "Persist√™ncia de Mem√≥ria Inadequada",
        "descricao": "Reten√ß√£o inapropriada de informa√ß√µes sens√≠veis ou contextos obsoletos",
        "categoria": "Mem√≥ria",
        "keywords": ["mem√≥ria", "persist√™ncia", "hist√≥rico", "contexto", "reten√ß√£o"]
    },
    "6": {
        "nome": "Transpar√™ncia e Explicabilidade Limitada",
        "descricao": "Dificuldade em explicar decis√µes e processos de racioc√≠nio do agente",
        "categoria": "Transpar√™ncia",
        "keywords": ["explica√ß√£o", "transpar√™ncia", "black box", "interpretabilidade"]
    },
    "7": {
        "nome": "Vulnerabilidades de Seguran√ßa",
        "descricao": "Exposi√ß√£o a ataques, vazamentos de dados e falhas de seguran√ßa",
        "categoria": "Seguran√ßa",
        "keywords": ["seguran√ßa", "vulnerabilidade", "ataque", "prote√ß√£o", "criptografia"]
    },
    "8": {
        "nome": "Conformidade Regulat√≥ria",
        "descricao": "N√£o atendimento a regulamenta√ß√µes como AI Act, LGPD e normas setoriais",
        "categoria": "Compliance",
        "keywords": ["regulamenta√ß√£o", "compliance", "lgpd", "gdpr", "ai act", "norma"]
    },
    "9": {
        "nome": "Escalabilidade e Performance",
        "descricao": "Limita√ß√µes na capacidade de escalar e manter performance adequada",
        "categoria": "Performance",
        "keywords": ["escalabilidade", "performance", "lat√™ncia", "throughput", "capacidade"]
    },
    "10": {
        "nome": "Qualidade e Integridade dos Dados",
        "descricao": "Problemas na qualidade, completude e veracidade dos dados utilizados",
        "categoria": "Dados",
        "keywords": ["dados", "qualidade", "integridade", "veracidade", "completude"]
    },
    "11": {
        "nome": "Monitoramento e Auditoria",
        "descricao": "Aus√™ncia de sistemas adequados de monitoramento e trilhas de auditoria",
        "categoria": "Observabilidade",
        "keywords": ["monitoramento", "auditoria", "log", "rastreamento", "observabilidade"]
    },
    "12": {
        "nome": "Gest√£o de Exce√ß√µes e Falhas",
        "descricao": "Tratamento inadequado de situa√ß√µes excepcionais e recupera√ß√£o de falhas",
        "categoria": "Robustez",
        "keywords": ["exce√ß√£o", "falha", "erro", "recupera√ß√£o", "fallback"]
    },
    "13": {
        "nome": "Depend√™ncias Externas",
        "descricao": "Riscos associados √† depend√™ncia de servi√ßos e recursos externos",
        "categoria": "Depend√™ncia",
        "keywords": ["depend√™ncia", "terceiros", "fornecedor", "disponibilidade"]
    },
    "14": {
        "nome": "Impacto nos Stakeholders",
        "descricao": "Efeitos n√£o intencionais em usu√°rios, funcion√°rios e outras partes interessadas",
        "categoria": "Social",
        "keywords": ["stakeholder", "usu√°rio", "impacto social", "funcion√°rio"]
    },
    "15": {
        "nome": "Evolu√ß√£o e Adapta√ß√£o Descontrolada",
        "descricao": "Mudan√ßas n√£o supervisionadas no comportamento atrav√©s de aprendizado cont√≠nuo",
        "categoria": "Evolu√ß√£o",
        "keywords": ["evolu√ß√£o", "adapta√ß√£o", "aprendizado", "mudan√ßa comportamental"]
    }
}

class AgentRiskAnalyzer:
    """Analisador de riscos para sistemas de IA aut√¥noma usando OpenAI"""
    
    def __init__(self, openai_client):
        self.client = openai_client
        self.risks = AGENTIC_AI_RISKS
    
    def analyze_system(self, system_description: str, system_name: str = "") -> Dict:
        """Analisa um sistema usando OpenAI e retorna avalia√ß√£o de riscos"""
        
        if not self.client:
            # Fallback para an√°lise baseada em regras se OpenAI n√£o dispon√≠vel
            return self._fallback_analysis(system_description, system_name)
        
        try:
            # An√°lise usando OpenAI
            risk_scores = {}
            
            for risk_id, risk_info in self.risks.items():
                score, recommendations = self._analyze_single_risk(
                    system_description, risk_id, risk_info
                )
                
                risk_scores[risk_id] = {
                    "score": score,
                    "level": self._get_risk_level(score),
                    "recommendations": recommendations
                }
            
            # Score global
            global_score = sum(r["score"] for r in risk_scores.values()) / len(risk_scores)
            
            return {
                "system_name": system_name,
                "global_score": round(global_score, 1),
                "global_level": self._get_risk_level(global_score),
                "risks": risk_scores,
                "analysis_date": datetime.datetime.now().isoformat(),
                "analysis_method": "OpenAI GPT-4"
            }
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro na an√°lise OpenAI: {str(e)}. Usando an√°lise alternativa.")
            return self._fallback_analysis(system_description, system_name)
    
    def _analyze_single_risk(self, description: str, risk_id: str, risk_info: Dict) -> Tuple[float, List[str]]:
        """Analisa um risco espec√≠fico usando OpenAI"""
        
        prompt = f"""
        Voc√™ √© um especialista em avalia√ß√£o de riscos de IA aut√¥noma. Analise o sistema descrito abaixo para o risco espec√≠fico mencionado.

        SISTEMA A SER ANALISADO:
        {description}

        RISCO A AVALIAR:
        Nome: {risk_info['nome']}
        Descri√ß√£o: {risk_info['descricao']}
        Categoria: {risk_info['categoria']}

        INSTRU√á√ïES:
        1. Avalie o n√≠vel de risco de 0 a 100 (0 = sem risco, 100 = risco cr√≠tico)
        2. Considere fatores como: autonomia, dados processados, impacto das decis√µes, supervis√£o humana, controles existentes
        3. Forne√ßa 3 recomenda√ß√µes espec√≠ficas para mitigar este risco

        FORMATO DE RESPOSTA (JSON):
        {{
            "score": <n√∫mero de 0 a 100>,
            "justificativa": "<explica√ß√£o de 2-3 linhas>",
            "recommendations": [
                "<recomenda√ß√£o 1>",
                "<recomenda√ß√£o 2>",
                "<recomenda√ß√£o 3>"
            ]
        }}
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=500
            )
            
            result = json.loads(response.choices[0].message.content)
            return result["score"], result["recommendations"]
            
        except Exception as e:
            # Fallback para an√°lise baseada em regras
            return self._calculate_risk_score_fallback(description, risk_id, risk_info)
    
    def _fallback_analysis(self, system_description: str, system_name: str) -> Dict:
        """An√°lise de fallback baseada em regras quando OpenAI n√£o est√° dispon√≠vel"""
        
        risk_scores = {}
        description_lower = system_description.lower()
        
        for risk_id, risk_info in self.risks.items():
            score, recommendations = self._calculate_risk_score_fallback(
                description_lower, risk_id, risk_info
            )
            
            risk_scores[risk_id] = {
                "score": score,
                "level": self._get_risk_level(score),
                "recommendations": recommendations
            }
        
        global_score = sum(r["score"] for r in risk_scores.values()) / len(risk_scores)
        
        return {
            "system_name": system_name,
            "global_score": round(global_score, 1),
            "global_level": self._get_risk_level(global_score),
            "risks": risk_scores,
            "analysis_date": datetime.datetime.now().isoformat(),
            "analysis_method": "An√°lise Baseada em Regras"
        }
    
    def _calculate_risk_score_fallback(self, description: str, risk_id: str, risk_info: Dict) -> Tuple[float, List[str]]:
        """C√°lculo de risco baseado em palavras-chave (fallback)"""
        
        base_score = 35
        keywords = risk_info.get("keywords", [])
        
        # Aumenta score baseado em palavras-chave encontradas
        for keyword in keywords:
            if keyword in description:
                base_score += 12
        
        # Palavras que indicam controles (diminuem risco)
        control_keywords = [
            "supervis√£o", "controle", "governan√ßa", "auditoria", "monitoramento",
            "seguro", "protegido", "compliance", "respons√°vel", "transparente"
        ]
        
        for keyword in control_keywords:
            if keyword in description:
                base_score -= 8
        
        # Palavras que aumentam risco
        high_risk_keywords = [
            "aut√¥nomo", "sem supervis√£o", "autom√°tico", "cr√≠tico", "sens√≠vel",
            "personaliza√ß√£o", "decis√£o", "financeiro", "sa√∫de"
        ]
        
        for keyword in high_risk_keywords:
            if keyword in description:
                base_score += 10
        
        final_score = max(0, min(100, base_score))
        recommendations = self._get_recommendations(risk_id, final_score)
        
        return final_score, recommendations
    
    def _get_risk_level(self, score: float) -> str:
        """Converte score num√©rico em n√≠vel de risco"""
        if score >= 70:
            return "Alto"
        elif score >= 40:
            return "Moderado"
        else:
            return "Baixo"
    
    def _get_recommendations(self, risk_id: str, score: float) -> List[str]:
        """Gera recomenda√ß√µes espec√≠ficas para cada risco"""
        
        recommendations_map = {
            "1": [
                "Definir objetivos claros e mensur√°veis para o agente",
                "Implementar sistema de valida√ß√£o de metas organizacionais",
                "Estabelecer revis√µes peri√≥dicas de alinhamento estrat√©gico"
            ],
            "2": [
                "Implementar aprova√ß√£o humana para a√ß√µes cr√≠ticas",
                "Definir thresholds para interven√ß√£o autom√°tica",
                "Criar sistema de escala√ß√£o para decis√µes importantes"
            ],
            "3": [
                "Implementar rate limiting e controle de uso de APIs",
                "Auditar regularmente chamadas para servi√ßos externos",
                "Estabelecer fallbacks para falhas de depend√™ncias"
            ],
            "4": [
                "Realizar testes adversariais de comportamento",
                "Implementar diversidade nos dados de treinamento",
                "Monitorar vieses em tempo real"
            ],
            "5": [
                "Implementar pol√≠ticas de reten√ß√£o de dados",
                "Usar t√©cnicas de esquecimento seletivo",
                "Realizar limpeza peri√≥dica de contextos obsoletos"
            ],
            "6": [
                "Implementar t√©cnicas de XAI (Explainable AI)",
                "Criar logs detalhados do processo decis√≥rio",
                "Desenvolver interfaces de transpar√™ncia"
            ],
            "7": [
                "Implementar autentica√ß√£o e autoriza√ß√£o robustas",
                "Usar criptografia para dados sens√≠veis",
                "Realizar testes de penetra√ß√£o regulares"
            ],
            "8": [
                "Mapear requisitos regulat√≥rios aplic√°veis",
                "Implementar controles de compliance",
                "Realizar auditorias de conformidade"
            ],
            "9": [
                "Implementar arquitetura escal√°vel e resiliente",
                "Monitorar m√©tricas de performance continuamente",
                "Planejar capacidade baseada em demanda prevista"
            ],
            "10": [
                "Implementar valida√ß√£o cont√≠nua de qualidade de dados",
                "Estabelecer pipeline de data quality",
                "Criar m√©tricas de integridade dos dados"
            ],
            "11": [
                "Implementar logging abrangente e estruturado",
                "Criar dashboards de monitoramento em tempo real",
                "Estabelecer alertas proativos"
            ],
            "12": [
                "Implementar tratamento robusto de exce√ß√µes",
                "Criar mecanismos de fallback seguros",
                "Testar cen√°rios de falha regularmente"
            ],
            "13": [
                "Mapear e monitorar depend√™ncias cr√≠ticas",
                "Implementar alternativas para servi√ßos essenciais",
                "Estabelecer SLAs com fornecedores"
            ],
            "14": [
                "Avaliar impacto em stakeholders regularmente",
                "Implementar canais de feedback",
                "Comunicar mudan√ßas transparentemente"
            ],
            "15": [
                "Implementar controles de evolu√ß√£o supervisionada",
                "Monitorar mudan√ßas comportamentais",
                "Estabelecer checkpoints de valida√ß√£o"
            ]
        }
        
        return recommendations_map.get(risk_id, ["Implementar boas pr√°ticas de IA respons√°vel"])

class PDFGenerator:
    """Gerador de relat√≥rios em PDF otimizado"""
    
    def __init__(self):
        self.pdf_available = PDF_AVAILABLE
    
    def generate_report(self, analysis_result: Dict) -> bytes:
        """Gera relat√≥rio PDF da an√°lise de riscos"""
        
        if not self.pdf_available:
            # Fallback: gerar relat√≥rio em texto
            return self._generate_text_report(analysis_result)
        
        try:
            pdf = FPDF()
            pdf.add_page()
            
            # Configurar fonte
            pdf.set_font("Arial", "B", 18)
            
            # Cabe√ßalho
            pdf.cell(0, 15, "AgentRisk - Relatorio de Avaliacao", 0, 1, 'C')
            pdf.set_font("Arial", size=12)
            pdf.cell(0, 10, f"Sistema: {analysis_result.get('system_name', 'N/A')}", 0, 1, 'C')
            pdf.cell(0, 8, f"Data da Analise: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 1, 'C')
            pdf.cell(0, 8, f"Metodo: {analysis_result.get('analysis_method', 'N/A')}", 0, 1, 'C')
            pdf.ln(10)
            
            # Sum√°rio Executivo
            pdf.set_font("Arial", "B", 14)
            pdf.cell(0, 10, "SUMARIO EXECUTIVO", 0, 1)
            pdf.set_font("Arial", size=11)
            
            global_score = analysis_result['global_score']
            global_level = analysis_result['global_level']
            
            # Score Global
            pdf.cell(0, 8, f"Score Global de Risco: {global_score}/100", 0, 1)
            pdf.cell(0, 8, f"Classificacao: {global_level}", 0, 1)
            
            # Contadores por n√≠vel
            high_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Alto')
            medium_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Moderado')
            low_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Baixo')
            
            pdf.cell(0, 8, f"Riscos Altos: {high_count} | Moderados: {medium_count} | Baixos: {low_count}", 0, 1)
            pdf.ln(8)
            
            # Riscos por categoria
            pdf.set_font("Arial", "B", 12)
            pdf.cell(0, 10, "ANALISE DETALHADA", 0, 1)
            
            # Ordenar riscos por score (maior primeiro)
            sorted_risks = sorted(
                analysis_result['risks'].items(),
                key=lambda x: x[1]['score'],
                reverse=True
            )
            
            pdf.set_font("Arial", size=9)
            
            for risk_id, risk_data in sorted_risks[:10]:  # Limitar a 10 para evitar overflow
                risk_info = AGENTIC_AI_RISKS[risk_id]
                
                # Nome do risco (evitar caracteres especiais)
                risk_name = risk_info['nome'].replace('√£', 'a').replace('√ß', 'c').replace('√µ', 'o')
                pdf.set_font("Arial", "B", 10)
                pdf.cell(0, 7, f"{risk_id}. {risk_name}", 0, 1)
                
                # Detalhes
                pdf.set_font("Arial", size=9)
                pdf.cell(0, 5, f"Score: {risk_data['score']}/100 | Nivel: {risk_data['level']}", 0, 1)
                
                # Primeira recomenda√ß√£o (sem acentos)
                if risk_data['recommendations']:
                    rec = risk_data['recommendations'][0][:80].replace('√£', 'a').replace('√ß', 'c')
                    pdf.cell(0, 5, f"Recomendacao: {rec}...", 0, 1)
                
                pdf.ln(2)
            
            # Rodap√©
            pdf.ln(10)
            pdf.set_font("Arial", "I", 8)
            pdf.cell(0, 5, "Este relatorio foi gerado automaticamente pelo sistema AgentRisk", 0, 1, 'C')
            
            return pdf.output(dest='S').encode('latin-1')
            
        except Exception as e:
            st.error(f"Erro ao gerar PDF: {str(e)}")
            return self._generate_text_report(analysis_result)
    
    def _generate_text_report(self, analysis_result: Dict) -> bytes:
        """Gera relat√≥rio em formato texto como fallback"""
        
        report = f"""
AGENTRISK - RELAT√ìRIO DE AVALIA√á√ÉO DE RISCOS
============================================

Sistema: {analysis_result.get('system_name', 'N/A')}
Data: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}
M√©todo: {analysis_result.get('analysis_method', 'An√°lise Local')}

SUM√ÅRIO EXECUTIVO
=================
Score Global: {analysis_result['global_score']}/100
N√≠vel de Risco: {analysis_result['global_level']}

DISTRIBUI√á√ÉO DE RISCOS
=====================
"""
        
        high_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Alto')
        medium_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Moderado')
        low_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Baixo')
        
        report += f"Riscos Altos: {high_count}\n"
        report += f"Riscos Moderados: {medium_count}\n"
        report += f"Riscos Baixos: {low_count}\n\n"
        
        report += "AN√ÅLISE DETALHADA\n"
        report += "=================\n\n"
        
        # Ordenar riscos por score
        sorted_risks = sorted(
            analysis_result['risks'].items(),
            key=lambda x: x[1]['score'],
            reverse=True
        )
        
        for risk_id, risk_data in sorted_risks:
            risk_info = AGENTIC_AI_RISKS[risk_id]
            report += f"{risk_id}. {risk_info['nome']}\n"
            report += f"   Score: {risk_data['score']}/100 | N√≠vel: {risk_data['level']}\n"
            report += f"   Categoria: {risk_info['categoria']}\n"
            if risk_data['recommendations']:
                report += f"   Recomenda√ß√£o: {risk_data['recommendations'][0]}\n"
            report += "\n"
        
        report += "\n---\nRelat√≥rio gerado pelo AgentRisk\n"
        
        return report.encode('utf-8')

# Inicializa√ß√£o com cache
@st.cache_resource
def get_analyzer():
    client = get_openai_client()
    return AgentRiskAnalyzer(client)

@st.cache_resource  
def get_pdf_generator():
    return PDFGenerator()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Header principal com informa√ß√µes de deploy
    st.markdown("""
    <div class="main-header">
        <h1>üõ°Ô∏è AgentRisk</h1>
        <p>IA para Governan√ßa, Conformidade e Avalia√ß√£o de Riscos em Sistemas Aut√¥nomos</p>
        <small>üöÄ Rodando no Streamlit Cloud</small>
    </div>
    """, unsafe_allow_html=True)
    
    # Verificar configura√ß√µes
    client = get_openai_client()
    
    # Status das funcionalidades
    col1, col2, col3 = st.columns(3)
    with col1:
        if client:
            st.success("‚úÖ OpenAI: Ativo")
        else:
            st.info("‚ÑπÔ∏è OpenAI: An√°lise Local")
    
    with col2:
        if PDF_AVAILABLE:
            st.success("‚úÖ PDF: Dispon√≠vel")
        else:
            st.info("‚ÑπÔ∏è PDF: Relat√≥rio em Texto")
            
    with col3:
        st.success("‚úÖ Sistema: Operacional")
    
    # Sidebar
    with st.sidebar:
        st.header("üìã Menu de Navega√ß√£o")
        page = st.selectbox(
            "Escolha uma op√ß√£o:",
            ["üè† An√°lise de Risco", "üìä Dashboard", "üìã Sobre os 15 Riscos", "üîó Integra√ß√£o", "‚öôÔ∏è Configura√ß√µes"]
        )
        
        # Informa√ß√µes do sistema
        st.markdown("---")
        st.markdown("**üìç Status do Sistema**")
        st.info(f"üåê Deploy: Streamlit Cloud\nü§ñ IA: {'OpenAI GPT-4' if client else 'An√°lise Local'}")
    
    # Navega√ß√£o por p√°ginas
    if page == "üè† An√°lise de Risco":
        show_risk_analysis_page()
    elif page == "üìä Dashboard":
        show_dashboard_page()
    elif page == "üìã Sobre os 15 Riscos":
        show_risks_info_page()
    elif page == "üîó Integra√ß√£o":
        show_integration_page()
    else:
        show_settings_page()

def show_risk_analysis_page():
    """P√°gina principal de an√°lise de riscos"""
    
    st.header("üìù An√°lise de Risco do Sistema")
    
    # Verificar se h√° dados de integra√ß√£o
    if 'integrated_system' in st.session_state:
        st.success(f"üîó Sistema integrado: {st.session_state.integrated_system['name']}")
        system_name = st.session_state.integrated_system['name']
        system_description = st.session_state.integrated_system['description']
        
        with st.expander("Ver descri√ß√£o do sistema integrado"):
            st.text_area("Descri√ß√£o:", value=system_description, height=100, disabled=True)
            
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Limpar Integra√ß√£o", use_container_width=True):
                del st.session_state.integrated_system
                st.rerun()
        with col2:
            if st.button("‚úèÔ∏è Editar Descri√ß√£o", use_container_width=True):
                st.session_state.edit_mode = True
                st.rerun()
    else:
        # Formul√°rio manual
        col1, col2 = st.columns([1, 1])
        
        with col1:
            system_name = st.text_input(
                "üè∑Ô∏è Nome do Sistema:", 
                placeholder="Ex: HeatGlass, CarGlass Assistant",
                help="Nome identificador do sistema a ser analisado"
            )
        
        with col2:
            system_type = st.selectbox(
                "üîß Tipo de Sistema:",
                ["Assistente Virtual", "Sistema de An√°lise", "Automa√ß√£o de Processos", 
                 "Chatbot", "Sistema de Recomenda√ß√£o", "IA Generativa", "Sistema de Monitoramento", "Outro"],
                help="Selecione a categoria que melhor descreve seu sistema"
            )
        
        system_description = st.text_area(
            "üìÑ Descri√ß√£o T√©cnica do Sistema:",
            placeholder="""Descreva detalhadamente:
‚Ä¢ Funcionalidades principais
‚Ä¢ Tecnologias utilizadas (LLMs, APIs, frameworks)
‚Ä¢ Tipos de dados processados
‚Ä¢ N√≠vel de autonomia das decis√µes
‚Ä¢ Integra√ß√£o com outros sistemas
‚Ä¢ Controles de seguran√ßa existentes
‚Ä¢ Supervis√£o humana implementada""",
            help="Quanto mais detalhada a descri√ß√£o, mais precisa ser√° a an√°lise de riscos.",
            height=200
        )
    
    # Bot√£o de an√°lise
    col1, col2 = st.columns([3, 1])
    
    with col1:
        analyze_button = st.button(
            "üîç Analisar Riscos", 
            type="primary", 
            use_container_width=True,
            help="Inicia a an√°lise de riscos usando IA"
        )
    
    with col2:
        st.button("üìã Exemplo", help="Carregar exemplo de descri√ß√£o")
    
    if analyze_button:
        if system_description.strip():
            with st.spinner("üîÑ Analisando riscos do sistema com IA..."):
                analyzer = get_analyzer()
                analysis_result = analyzer.analyze_system(system_description, system_name)
                
                # Salvar resultado na sess√£o
                st.session_state.analysis_result = analysis_result
                
                st.success("‚úÖ An√°lise conclu√≠da!")
                st.balloons()  # Efeito visual
                st.rerun()
        else:
            st.error("‚ö†Ô∏è Por favor, forne√ßa uma descri√ß√£o do sistema.")
    
    # Mostrar resultados se dispon√≠veis
    if 'analysis_result' in st.session_state:
        show_analysis_results(st.session_state.analysis_result)

def show_analysis_results(analysis_result: Dict):
    """Exibe os resultados da an√°lise de riscos"""
    
    st.header("üìä Resultados da An√°lise")
    
    # Informa√ß√µes da an√°lise
    col1, col2, col3 = st.columns(3)
    with col1:
        st.info(f"üè∑Ô∏è **Sistema:** {analysis_result.get('system_name', 'N/A')}")
    with col2:
        st.info(f"üïí **Analisado em:** {datetime.datetime.fromisoformat(analysis_result['analysis_date']).strftime('%d/%m/%Y %H:%M')}")
    with col3:
        st.info(f"ü§ñ **M√©todo:** {analysis_result.get('analysis_method', 'N/A')}")
    
    # Score global
    global_score = analysis_result['global_score']
    global_level = analysis_result['global_level']
    
    score_class = "score-low" if global_score < 40 else "score-medium" if global_score < 70 else "score-high"
    emoji = "üü¢" if global_score < 40 else "üü°" if global_score < 70 else "üî¥"
    
    st.markdown(f"""
    <div class="score-container {score_class}">
        <h2>{emoji} Score Global de Risco</h2>
        <h1>{global_score}/100</h1>
        <h3>N√≠vel: {global_level}</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # M√©tricas r√°pidas
    col1, col2, col3 = st.columns(3)
    
    high_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Alto')
    medium_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Moderado')
    low_count = sum(1 for r in analysis_result['risks'].values() if r['level'] == 'Baixo')
    
    with col1:
        st.metric("üî¥ Riscos Altos", high_count, delta=-high_count if high_count > 0 else None)
    with col2:
        st.metric("üü° Riscos Moderados", medium_count)
    with col3:
        st.metric("üü¢ Riscos Baixos", low_count, delta=low_count if low_count > 0 else None)
    
    # An√°lise por risco
    st.subheader("üîç An√°lise Detalhada por Risco")
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    with col1:
        risk_filter = st.selectbox("Filtrar por n√≠vel:", ["Todos", "Alto", "Moderado", "Baixo"])
    with col2:
        category_filter = st.selectbox("Filtrar por categoria:", 
                                     ["Todas"] + list(set(risk['categoria'] for risk in AGENTIC_AI_RISKS.values())))
    with col3:
        sort_option = st.selectbox("Ordenar por:", ["Score (Maior)", "Score (Menor)", "Nome", "Categoria"])
    
    # Aplicar filtros
    risks_to_show = analysis_result['risks']
    
    if risk_filter != "Todos":
        risks_to_show = {k: v for k, v in risks_to_show.items() if v['level'] == risk_filter}
    
    if category_filter != "Todas":
        risks_to_show = {k: v for k, v in risks_to_show.items() 
                        if AGENTIC_AI_RISKS[k]['categoria'] == category_filter}
    
    # Aplicar ordena√ß√£o
    if sort_option == "Score (Maior)":
        risks_to_show = dict(sorted(risks_to_show.items(), key=lambda x: x[1]['score'], reverse=True))
    elif sort_option == "Score (Menor)":
        risks_to_show = dict(sorted(risks_to_show.items(), key=lambda x: x[1]['score']))
    elif sort_option == "Nome":
        risks_to_show = dict(sorted(risks_to_show.items(), key=lambda x: AGENTIC_AI_RISKS[x[0]]['nome']))
    elif sort_option == "Categoria":
        risks_to_show = dict(sorted(risks_to_show.items(), key=lambda x: AGENTIC_AI_RISKS[x[0]]['categoria']))
    
    # Mostrar riscos
    for risk_id, risk_data in risks_to_show.items():
        risk_info = AGENTIC_AI_RISKS[risk_id]
        
        risk_class = "risk-low" if risk_data['level'] == "Baixo" else "risk-medium" if risk_data['level'] == "Moderado" else "risk-high"
        level_emoji = "üü¢" if risk_data['level'] == "Baixo" else "üü°" if risk_data['level'] == "Moderado" else "üî¥"
        
        with st.container():
            st.markdown(f"""
            <div class="risk-card {risk_class}">
                <h4>{level_emoji} {risk_id}. {risk_info['nome']}</h4>
                <p><strong>Categoria:</strong> {risk_info['categoria']} | <strong>Score:</strong> {risk_data['score']}/100 | <strong>N√≠vel:</strong> {risk_data['level']}</p>
                <p><strong>Descri√ß√£o:</strong> {risk_info['descricao']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Recomenda√ß√µes
            with st.expander(f"üí° Recomenda√ß√µes para {risk_info['nome']}"):
                for i, rec in enumerate(risk_data['recommendations'], 1):
                    st.write(f"**{i}.** {rec}")
                
                if risk_data['score'] >= 70:
                    st.error("‚ö†Ô∏è **ATEN√á√ÉO:** Este √© um risco de n√≠vel ALTO que requer a√ß√£o imediata!")
                elif risk_data['score'] >= 40:
                    st.warning("‚ö° **CUIDADO:** Este risco deve ser monitorado e mitigado.")
    
    # Bot√µes de a√ß√£o
    st.markdown("---")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìÑ Gerar Relat√≥rio", use_container_width=True):
            with st.spinner("Gerando relat√≥rio..."):
                pdf_generator = get_pdf_generator()
                report_bytes = pdf_generator.generate_report(analysis_result)
                
                # Determinar tipo de arquivo baseado na disponibilidade do PDF
                if PDF_AVAILABLE:
                    file_name = f"AgentRisk_Report_{analysis_result.get('system_name', 'Sistema')}_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
                    mime_type = "application/pdf"
                else:
                    file_name = f"AgentRisk_Report_{analysis_result.get('system_name', 'Sistema')}_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.txt"
                    mime_type = "text/plain"
                
                st.download_button(
                    label="‚¨áÔ∏è Download Relat√≥rio",
                    data=report_bytes,
                    file_name=file_name,
                    mime=mime_type,
                    use_container_width=True
                )
    
    with col2:
        if st.button("üìä Ver Dashboard", use_container_width=True):
            # Simular mudan√ßa de p√°gina via session state
            st.session_state.show_dashboard = True
            st.rerun()
    
    with col3:
        if st.button("üîÑ Nova An√°lise", use_container_width=True):
            for key in ['analysis_result', 'integrated_system']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
    
    with col4:
        if st.button("üì§ Compartilhar", use_container_width=True):
            st.info("üîó Link de compartilhamento copiado! (funcionalidade em desenvolvimento)")

def show_dashboard_page():
    """P√°gina de dashboard com m√©tricas agregadas"""
    
    st.header("üìä Dashboard de Riscos")
    
    if 'analysis_result' not in st.session_state:
        st.warning("‚ö†Ô∏è Nenhuma an√°lise dispon√≠vel. Realize uma an√°lise primeiro.")
        if st.button("üîô Voltar para An√°lise"):
            st.rerun()
        return
    
    analysis = st.session_state.analysis_result
    
    # Informa√ß√µes do sistema analisado
    st.info(f"üìä Dashboard para: **{analysis.get('system_name', 'Sistema An√¥nimo')}**")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Score Global", 
            f"{analysis['global_score']}/100",
            delta=f"{analysis['global_level']}"
        )
    
    with col2:
        high_risks = sum(1 for r in analysis['risks'].values() if r['level'] == 'Alto')
        st.metric("Riscos Altos", high_risks, delta=f"-{high_risks}" if high_risks > 0 else "0")
    
    with col3:
        medium_risks = sum(1 for r in analysis['risks'].values() if r['level'] == 'Moderado')
        st.metric("Riscos Moderados", medium_risks)
    
    with col4:
        low_risks = sum(1 for r in analysis['risks'].values() if r['level'] == 'Baixo')
        st.metric("Riscos Baixos", low_risks, delta=f"+{low_risks}" if low_risks > 0 else "0")
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Distribui√ß√£o por N√≠vel de Risco")
        levels = [r['level'] for r in analysis['risks'].values()]
        level_counts = {
            'Alto': levels.count('Alto'),
            'Moderado': levels.count('Moderado'),
            'Baixo': levels.count('Baixo')
        }
        st.bar_chart(level_counts)
    
    with col2:
        st.subheader("üè∑Ô∏è Distribui√ß√£o por Categoria")
        categories = [AGENTIC_AI_RISKS[risk_id]['categoria'] for risk_id in analysis['risks'].keys()]
        category_counts = {}
        for cat in set(categories):
            category_counts[cat] = categories.count(cat)
        st.bar_chart(category_counts)
    
    # Top riscos mais cr√≠ticos
    st.subheader("‚ö†Ô∏è Top 5 Riscos Mais Cr√≠ticos")
    
    sorted_risks = sorted(
        analysis['risks'].items(),
        key=lambda x: x[1]['score'],
        reverse=True
    )[:5]
    
    for i, (risk_id, risk_data) in enumerate(sorted_risks, 1):
        risk_info = AGENTIC_AI_RISKS[risk_id]
        level_emoji = "üî¥" if risk_data['level'] == "Alto" else "üü°" if risk_data['level'] == "Moderado" else "üü¢"
        
        col1, col2, col3 = st.columns([1, 4, 1])
        
        with col1:
            st.markdown(f"**#{i}**")
        with col2:
            st.markdown(f"{level_emoji} **{risk_info['nome']}** - {risk_info['categoria']}")
        with col3:
            st.markdown(f"**{risk_data['score']}/100**")
    
    # An√°lise por categoria
    st.subheader("üìã Resumo por Categoria")
    
    # Agrupar riscos por categoria
    risks_by_category = {}
    for risk_id, risk_data in analysis['risks'].items():
        category = AGENTIC_AI_RISKS[risk_id]['categoria']
        if category not in risks_by_category:
            risks_by_category[category] = []
        risks_by_category[category].append((risk_id, risk_data))
    
    # Mostrar cada categoria
    for category, risks in risks_by_category.items():
        avg_score = sum(risk_data['score'] for _, risk_data in risks) / len(risks)
        high_count = sum(1 for _, risk_data in risks if risk_data['level'] == 'Alto')
        
        with st.expander(f"üî∏ {category} - Score M√©dio: {avg_score:.1f}/100"):
            for risk_id, risk_data in risks:
                risk_info = AGENTIC_AI_RISKS[risk_id]
                level_emoji = "üî¥" if risk_data['level'] == "Alto" else "üü°" if risk_data['level'] == "Moderado" else "üü¢"
                st.write(f"{level_emoji} **{risk_info['nome']}**: {risk_data['score']}/100")

def show_integration_page():
    """P√°gina de demonstra√ß√£o de integra√ß√£o"""
    
    st.header("üîó Integra√ß√£o com Outros Sistemas")
    
    st.markdown("""
    Esta p√°gina demonstra como integrar o **AgentRisk** com outros sistemas do ecossistema Agente.
    """)
    
    # Sistemas exemplo do ecossistema
    st.subheader("üéØ Sistemas Dispon√≠veis para Integra√ß√£o")
    
    example_systems = {
        "HeatGlass": {
            "name": "HeatGlass",
            "description": """Sistema de an√°lise t√©rmica aut√¥nomo que utiliza IA para processamento de imagens termogr√°ficas em tempo real, detec√ß√£o autom√°tica de anomalias de temperatura, gera√ß√£o de alertas automatizados, integra√ß√£o com sensores IoT, machine learning para predi√ß√£o de falhas, interface web para visualiza√ß√£o, API REST para integra√ß√£o, armazenamento de dados hist√≥ricos e processamento de grandes volumes sem supervis√£o humana constante. O sistema toma decis√µes cr√≠ticas sobre manuten√ß√£o preventiva e pode parar opera√ß√µes automaticamente em caso de risco.""",
            "icon": "üå°Ô∏è",
            "risk_level": "Alto"
        },
        "CarGlass Assistant": {
            "name": "CarGlass Assistant", 
            "description": """Assistente virtual aut√¥nomo para atendimento ao cliente que processa linguagem natural, acessa base de conhecimento para respostas automatizadas, integra com CRM e ERP, realiza agendamentos automaticamente, processa pagamentos e transa√ß√µes, coleta dados de clientes, toma decis√µes sobre aprova√ß√£o de servi√ßos, escala atendimento sem interven√ß√£o humana e utiliza dados pessoais para personaliza√ß√£o. Sistema cr√≠tico para experi√™ncia do cliente e opera√ß√µes comerciais.""",
            "icon": "üöó",
            "risk_level": "Moderado"
        },
        "MindGlass": {
            "name": "MindGlass",
            "description": """Sistema de an√°lise comportamental que utiliza deep learning para analisar padr√µes de usu√°rios, toma decis√µes automatizadas baseadas em perfis comportamentais, processa dados biom√©tricos e comportamentais sens√≠veis, sistema de recomenda√ß√µes personalizadas, integra√ß√£o com m√∫ltiplas fontes de dados, capacidade de adapta√ß√£o e aprendizado cont√≠nuo, opera√ß√£o 24/7 com m√≠nima supervis√£o e impacto direto em decis√µes cr√≠ticas de neg√≥cio. Potencial alto impacto em privacidade e vi√©s algor√≠tmico.""",
            "icon": "üß†",
            "risk_level": "Alto"
        },
        "Or√°culo": {
            "name": "Or√°culo",
            "description": """Sistema de business intelligence aut√¥nomo que coleta dados de m√∫ltiplas fontes automaticamente, executa an√°lises preditivas complexas, gera insights e recomenda√ß√µes estrat√©gicas, toma decis√µes de investimento automatizadas, processa dados financeiros sens√≠veis, integra com sistemas banc√°rios, monitora compliance, opera com alto n√≠vel de autonomia, influencia decis√µes corporativas cr√≠ticas e utiliza algoritmos de machine learning n√£o supervisionado. Sistema com impacto financeiro direto e decis√µes de alto valor.""",
            "icon": "üîÆ",
            "risk_level": "Alto"
        }
    }
    
    for system_key, system_info in example_systems.items():
        with st.container():
            col1, col2, col3, col4 = st.columns([1, 3, 1, 1])
            
            with col1:
                st.markdown(f"## {system_info['icon']}")
            
            with col2:
                st.markdown(f"**{system_info['name']}**")
                st.caption(f"N√≠vel de Risco Estimado: {system_info['risk_level']}")
            
            with col3:
                risk_color = "üî¥" if system_info['risk_level'] == "Alto" else "üü°"
                st.markdown(f"{risk_color} {system_info['risk_level']}")
            
            with col4:
                if st.button(f"üîó Integrar", key=f"integrate_{system_key}", use_container_width=True):
                    st.session_state.integrated_system = system_info
                    st.success(f"‚úÖ {system_info['name']} integrado com sucesso!")
                    st.balloons()
                    
                    # Auto-redirect para an√°lise
                    st.info("üîÑ Redirecionando para an√°lise...")
                    st.rerun()
            
            with st.expander(f"üìã Ver descri√ß√£o t√©cnica - {system_info['name']}"):
                st.text_area("Descri√ß√£o:", value=system_info['description'], height=100, disabled=True, key=f"desc_{system_key}")
    
    # Instru√ß√µes de integra√ß√£o t√©cnica
    st.markdown("---")
    st.subheader("üõ†Ô∏è Instru√ß√µes para Desenvolvedores")
    
    tab1, tab2, tab3 = st.tabs(["Session State", "API REST", "Bot√£o de Integra√ß√£o"])
    
    with tab1:
        st.markdown("### Integra√ß√£o via Session State (Streamlit)")
        st.code("""
# No seu sistema principal (ex: HeatGlass)
import streamlit as st

if st.button("üõ°Ô∏è Avaliar Riscos com AgentRisk"):
    # Definir dados do sistema
    st.session_state.integrated_system = {
        'name': 'Meu Sistema',
        'description': '''
        Descri√ß√£o t√©cnica detalhada do sistema:
        - Funcionalidades principais
        - Tecnologias utilizadas  
        - Dados processados
        - N√≠vel de autonomia
        - Controles de seguran√ßa
        '''
    }
    
    # Redirecionar para AgentRisk
    st.switch_page("agentrisk.py")
        """, language="python")
    
    with tab2:
        st.markdown("### API REST (Vers√£o Futura)")
        st.code("""
# Endpoint para an√°lise de riscos
POST /api/v1/analyze

# Payload
{
    "system_name": "Nome do Sistema",
    "system_description": "Descri√ß√£o t√©cnica...",
    "analysis_options": {
        "include_recommendations": true,
        "risk_threshold": "moderate"
    }
}

# Response
{
    "analysis_id": "uuid",
    "global_score": 65.2,
    "global_level": "Moderado", 
    "risks": {...},
    "pdf_report_url": "https://..."
}
        """, language="json")
    
    with tab3:
        st.markdown("### Bot√£o de Integra√ß√£o Universal")
        st.code("""
# Componente reutiliz√°vel para qualquer sistema
def agentrisk_integration_button(system_name, system_description):
    if st.button(f"üõ°Ô∏è Avaliar {system_name} com AgentRisk", 
                 type="secondary",
                 use_container_width=True):
        
        st.session_state.integrated_system = {
            'name': system_name,
            'description': system_description
        }
        
        st.success(f"‚úÖ {system_name} ser√° analisado pelo AgentRisk")
        return True
    return False

# Uso em qualquer sistema
if agentrisk_integration_button("MeuSistema", "Descri√ß√£o..."):
    # L√≥gica de redirecionamento
    pass
        """, language="python")

def show_risks_info_page():
    """P√°gina com informa√ß√µes sobre os 15 riscos"""
    
    st.header("üìã Os 15 Riscos de Agentic AI")
    st.markdown("*Baseado no documento 'Agentic AI in Financial Services - IBM Consulting (Maio/2025)'*")
    
    # Organizar por categoria
    risks_by_category = {}
    for risk_id, risk_info in AGENTIC_AI_RISKS.items():
        category = risk_info['categoria']
        if category not in risks_by_category:
            risks_by_category[category] = []
        risks_by_category[category].append((risk_id, risk_info))
    
    # Mostrar estat√≠sticas gerais
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de Riscos", "15")
    with col2:
        st.metric("Categorias", len(risks_by_category))
    with col3:
        st.metric("Baseado em", "IBM Consulting 2025")
    
    # Mostrar riscos por categoria
    for category, risks in risks_by_category.items():
        st.subheader(f"üî∏ {category}")
        
        for risk_id, risk_info in risks:
            with st.expander(f"{risk_id}. {risk_info['nome']}"):
                st.markdown(f"**Descri√ß√£o:** {risk_info['descricao']}")
                st.markdown(f"**Categoria:** {risk_info['categoria']}")
                
                # Mostrar palavras-chave se dispon√≠veis
                if 'keywords' in risk_info:
                    keywords_str = ", ".join(risk_info['keywords'])
                    st.markdown(f"**Palavras-chave:** {keywords_str}")
                
                # Exemplos de controles
                controls_examples = {
                    "1": "Defini√ß√£o clara de objetivos, valida√ß√£o regular de metas",
                    "2": "Thresholds de aprova√ß√£o, escala√ß√£o para humanos",
                    "3": "Rate limiting, monitoramento de uso, fallbacks",
                    "4": "Testes adversariais, diversidade de dados",
                    "5": "Pol√≠ticas de reten√ß√£o, esquecimento seletivo"
                }
                
                if risk_id in controls_examples:
                    st.info(f"üí° **Exemplos de Controles:** {controls_examples[risk_id]}")

def show_settings_page():
    """P√°gina de configura√ß√µes do sistema"""
    
    st.header("‚öôÔ∏è Configura√ß√µes do AgentRisk")
    
    # Configura√ß√µes de OpenAI
    st.subheader("ü§ñ Configura√ß√£o da IA")
    
    client = get_openai_client()
    if client:
        st.success("‚úÖ OpenAI configurada e funcionando")
        
        # Teste de conectividade
        if st.button("üß™ Testar Conex√£o OpenAI"):
            try:
                with st.spinner("Testando conex√£o..."):
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role": "user", "content": "Teste de conectividade. Responda apenas: OK"}],
                        max_tokens=10
                    )
                    st.success(f"‚úÖ Teste bem-sucedido: {response.choices[0].message.content}")
            except Exception as e:
                st.error(f"‚ùå Erro no teste: {str(e)}")
    else:
        st.error("‚ùå OpenAI n√£o configurada")
        st.info("""
        **Para configurar:**
        1. Acesse as configura√ß√µes do app no Streamlit Cloud
        2. V√° em 'Secrets'
        3. Adicione: `OPENAI_API_KEY = "sua_chave_aqui"`
        4. Salve e fa√ßa redeploy
        """)
    
    # Configura√ß√µes de an√°lise
    st.subheader("üîß Configura√ß√µes de An√°lise")
    
    col1, col2 = st.columns(2)
    
    with col1:
        high_risk_threshold = st.slider("Limite para Risco Alto:", 50, 90, 70, 5)
        st.caption(f"Riscos com score ‚â• {high_risk_threshold} ser√£o classificados como 'Alto'")
    
    with col2:
        medium_risk_threshold = st.slider("Limite para Risco Moderado:", 20, 60, 40, 5)
        st.caption(f"Riscos com score ‚â• {medium_risk_threshold} ser√£o classificados como 'Moderado'")
    
    # Informa√ß√µes do sistema
    st.subheader("üìä Informa√ß√µes do Sistema")
    
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"""
        **Vers√£o:** AgentRisk v1.0
        **Deploy:** Streamlit Cloud
        **IA:** {'OpenAI GPT-4' if client else 'An√°lise Local'}
        **Riscos Analisados:** 15
        """)
    
    with col2:
        st.info(f"""
        **√öltima Atualiza√ß√£o:** {datetime.datetime.now().strftime('%d/%m/%Y')}
        **Reposit√≥rio:** GitHub (Auto-deploy)
        **Documenta√ß√£o:** IBM Consulting 2025
        **Status:** ‚úÖ Operacional
        """)
    
    # Limpeza de dados
    st.subheader("üóëÔ∏è Gerenciamento de Dados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üóëÔ∏è Limpar Dados da Sess√£o", use_container_width=True):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.success("‚úÖ Dados da sess√£o limpos!")
            st.rerun()
    
    with col2:
        if st.button("üîÑ Reiniciar Aplica√ß√£o", use_container_width=True):
            st.rerun()
    
    # Sobre o projeto
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Sobre o AgentRisk")
    
    st.markdown("""
    **AgentRisk** √© um sistema de avalia√ß√£o de riscos especializado em IA aut√¥noma (Agentic AI).
    
    **Desenvolvido para:**
    - ‚úÖ Avaliar 15 categorias espec√≠ficas de riscos
    - ‚úÖ Gerar relat√≥rios executivos 
    - ‚úÖ Integrar com ecossistema de sistemas
    - ‚úÖ Garantir conformidade regulat√≥ria
    
    **Baseado em:**
    - üìö "Agentic AI in Financial Services" - IBM Consulting (Maio/2025)
    - üèõÔ∏è AI Act (Uni√£o Europeia)
    - üáßüá∑ LGPD (Brasil)
    - üåç Melhores pr√°ticas internacionais
    
    **Pr√≥ximas vers√µes:**
    - üîÑ API REST completa
    - üîÑ Dashboard avan√ßado
    - üîÑ Hist√≥rico de an√°lises
    - üîÑ Alertas proativos
    """)

if __name__ == "__main__":
    main()
